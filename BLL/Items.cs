
// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Reflection;
using DAL;
using System.Collections;
using System.Linq;
using StockoutIndexBuilder;


namespace BLL
{
    public class Items : _Items
    {
        public Items()
        {

        }

        /// <summary>
        /// Loads the Products by the mapping ID and returns the ID
        /// Note: The Code Column has been used for the puspose of mapping
        /// </summary>
        /// <param name="mappingID"></param>
        /// <returns>The ID of the Product table</returns>
        public int LoadByMappingID(int mappingID)
        {
            this.FlushData();
            this.Where.Code.Value = mappingID.ToString();
            this.Query.Load();
            if (this.RowCount > 0)
            {
                return this.ID;
            }
            else
            {
                return -1;
            }
        }

        public bool IsMapped
        {
            get { return !this.IsColumnNull("Code"); }
        }

        public int? MappingID
        {
            get { return this.IsColumnNull("Code") ? (int?)null : int.Parse(this.Code.ToString()); }
        }


        /// <summary> 
        /// Only works after the GetAllItems() function is called.
        /// </summary>
        public String FullItemName
        {

            get
            {
                String name = "";
                try
                {
                    name = DataRow["FullItemName"].ToString();
                }
                catch { }
                return name;
            }
        }

        public long TotalQuantityLeftInAllBatches(int storeID)
        {

            string query =
                string.Format(
                    "select SUM(QuantityLeft) Total from ReceiveDoc where itemid={0} and StoreID={1} group by ItemID",
                    this.ID, storeID);
            BLL.Items temp = new Items();
            temp.LoadFromRawSql(query);
            if (temp.RowCount > 0)
            {
                return long.Parse(temp.GetColumn("Total").ToString());
            }
            return 0;
        }

        public DataTable GetItemsWithLastIssuedOrDisposedDate()
        {
            string query = "select distinct * from Items itm left join (select ItemID, DATEDIFF(dd,max(Date),GETDATE()) as DaysOutOfStock " +
                                 "from (select ItemID,Date from (select id.ItemID ItemID,max(id.EurDate) Date from IssueDoc id " +
                                 "where id.ItemID in (select ItemID from ReceiveDoc rd group by ItemID having sum(rd.QuantityLeft)=0) group by id.ItemID) " +
                                 "x union (select d.ItemID ItemID,max(d.EurDate) Date from Disposal d where ItemID in (select ItemID from ReceiveDoc rd group by " +
                                 "ItemID having sum(rd.QuantityLeft)=0) group by d.ItemID)) x group by x.ItemID ) as y on itm.ID=y.ItemID";
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetItemsWithLastIssuedOrDisposedDate1()
        {
            var query = "select distinct * from Items itm left join (select ItemID, DATEDIFF(dd,max(Date),GETDATE()) as DaysOutOfStock " +
                                 "from (select ItemID,Date from (select id.ItemID ItemID,max(id.EurDate) Date from IssueDoc id " +
                                 "where id.ItemID in (select ItemID from ReceiveDoc rd group by ItemID having sum(rd.QuantityLeft)=0) group by id.ItemID) " +
                                 "x union (select d.ItemID ItemID,max(d.EurDate) Date from Disposal d where ItemID in (select ItemID from ReceiveDoc rd group by " +
                                 "ItemID having sum(rd.QuantityLeft)=0) group by d.ItemID)) x group by x.ItemID ) as y on itm.DSItemID=y.ItemID";
            this.LoadFromRawSql(query);
            return this.DataTable;
        }
        public int GetDOSNoBegginingBalance(DateTime startdate,DateTime enddate, int itemid, int storeid)
        {
            var query = string.Format(@"SELECT TOP 1 
                                       DATEDIFF(dd,'{0}',eurdate )DOS
 
                                FROM    (SELECT    rd.ID ,
                                                    rd.ItemID  ,
                                                    rd.Quantity Received ,  
					                                rd.EurDate 
                                          FROM      ReceiveDoc rd
                                          WHERE     ItemID = {2}
                                                    AND StoreID = {3}
                                                    AND rd.[EurDate]   BETWEEN '{0}' and'{1}' 
                                          UNION 
                                -- select the Found/Adjusted
                                          SELECT    d.ID ,
                                                    rd.ItemID , 
                                                    ISNULL(d.Quantity, 0) AS Received , 
                                                    d.EurDate
                                          FROM      Disposal d
                                                    JOIN ReceiveDoc rd ON d.RecID = rd.ID
                                          WHERE     d.ItemID = {2}
                                                    AND d.StoreId = {3}
                                                    AND d.Losses = 0
                                                    AND d.[EurDate] BETWEEN '{0}' and'{1}' 
					                                    ) results
                                          ORDER BY EurDate asc",startdate,enddate,itemid,storeid);
            this.LoadFromRawSql(query);
            int DOS = 59;
            if (this.DataTable.Rows.Count > 0)
            {
                DOS = Convert.ToInt16(this.DataTable.Rows[0]["DOS"]);
            }
            return DOS;
        }
            public int GetDaysOutOfStockBinCard(DateTime startdate, DateTime enddate, int itemid, int storeid, double  bb )
        {
            var  query = string.Format(@"SELECT  *
                                                    INTO    #tmp
                                                    FROM    (
                                                    -- select the received item
                                                              SELECT    rd.ID ,
                                                                        rd.ItemID ,
                                                                        ISNULL(rd.RefNo, '') AS RefNo ,
                                                                        ISNULL(rd.EurDate, '') AS [Date] ,
                                                                        ISNULL(rd.BatchNo, '') AS [BatchNo] ,
                                                                        rd.Quantity Received ,
                                                                        Issued = 0 ,
                                                                        ISNULL(rd.Cost, 0) UnitPrice ,
                                                                        ISNULL(rd.Cost * rd.Quantity, 0) AS TotalPrice ,
                                                                        Balance = 0 ,
                                                                        ISNULL(ExpDate, '') ExpDate ,
                                                                        Precedance = 1 ,
                                                                        ToFrom = ( SELECT   CompanyName
                                                                                   FROM     Supplier
                                                                                   WHERE    ID = rd.SupplierID
                                                                                 )
                                                              FROM      ReceiveDoc rd
                                                              WHERE     ItemID = {2}
                                                                        AND StoreID = {3}
                                                                        AND rd.[EurDate] BETWEEN '{0}' AND '{1}'
					  
                                                              UNION
                                                    -- select the issued item
                                                              SELECT    id.ID ,
                                                                        rd.ItemID ,
                                                                        ISNULL(id.RefNo, '') ,
                                                                        ISNULL(id.EurDate, '') ,
                                                                        ISNULL(rd.BatchNo, '') ,
                                                                        Received = 0 ,
                                                                        ISNULL(id.Quantity, '') AS Issued ,
                                                                        ISNULL(rd.Cost, 0) UnitPrice ,
                                                                        ISNULL(rd.Cost * id.Quantity, 0) AS TotalPrice ,
                                                                        Balance = 0 ,
                                                                        ISNULL(ExpDate, '') ,
                                                                        Precedance = 3 ,
                                                                        ToFrom = ( SELECT   Name
                                                                                   FROM     ReceivingUnits
                                                                                   WHERE    ID = id.ReceivingUnitID
                                                                                 )
                                                              FROM      IssueDoc id
                                                                        JOIN ReceiveDoc rd ON id.RecievDocID = rd.ID
                                                              WHERE     id.ItemID = {2}
                                                                        AND id.StoreId = {3}
                                                                        AND rd.StoreID = {3}
                                                                        AND id.[EurDate] BETWEEN '{0}' AND '{1}'
                                                              UNION
                                                    -- select the Lost
                                                              SELECT    d.ID ,
                                                                        rd.ItemID ,
                                                                        ISNULL(d.RefNo, '') ,
                                                                        ISNULL(d.EurDate, '') ,
                                                                        ISNULL(rd.BatchNo, '') ,
                                                                        Received = 0 ,
                                                                        ISNULL(d.Quantity, 0) AS Issued ,
                                                                        ISNULL(rd.Cost, 0) UnitPrice ,
                                                                        ISNULL(rd.Cost * d.Quantity, 0) AS TotalPrice ,
                                                                        Balance = 0 ,
                                                                        ExpDate ,
                                                                        Precedance = 4 ,
                                                                        ToFrom = ( SELECT   CAST (Reason AS VARCHAR)
                                                                                   FROM     DisposalReasons
                                                                                   WHERE    ID = d.ReasonId
                                                                                 )
                                                              FROM      Disposal d
                                                                        JOIN ReceiveDoc rd ON d.RecID = rd.ID
                                                              WHERE     d.ItemID = {2}
                                                                        AND d.StoreId = {3}
                                                                        AND d.Losses = 1
                                                                        AND d.[EurDate] BETWEEN '{0}' AND '{1}'
                                                              UNION
                                                    -- select the Found/Adjusted
                                                              SELECT    d.ID ,
                                                                        rd.ItemID ,
                                                                        ISNULL(d.RefNo, '') ,
                                                                        ISNULL(d.EurDate, '') ,
                                                                        ISNULL(rd.BatchNo, '') ,
                                                                        ISNULL(d.Quantity, 0) AS Received ,
                                                                        Issued = NULL ,
                                                                        ISNULL(rd.Cost, 0) UnitPrice ,
                                                                        ISNULL(rd.Cost * d.Quantity, 0) AS TotalPrice ,
                                                                        Balance = 0 ,
                                                                        ExpDate ,
                                                                        Precedance = 2 ,
                                                                        ToFrom = ( SELECT   CAST(Reason AS VARCHAR)
                                                                                   FROM     DisposalReasons
                                                                                   WHERE    ID = d.ReasonId
                                                                                 )
                                                              FROM      Disposal d
                                                                        JOIN ReceiveDoc rd ON d.RecID = rd.ID
                                                              WHERE     d.ItemID = {2}
                                                                        AND d.StoreId = {3}
                                                                        AND d.Losses = 0
                                                                        AND d.[EurDate] BETWEEN '{0}' AND '{1}'
                                                    -- return the table.
                                                            ) results
                                                    ORDER BY [Date] ,
                                                            Precedance 
                                                    update t set  Balance = ISNULL(Received,0)+Balance - ISNULL(Issued, 0) from #tmp t  
                                                    select * from #tmp
                                                    order by [Date],Precedance", startdate, enddate, itemid, storeid);
              
            this.LoadFromRawSql(query);
            while (!EOF)
            {
                bb += Convert.ToInt32(GetColumn("Balance"));
                SetColumn("Balance", bb);
                MoveNext();
            } 
            DataTable dt = this.DataTable;
            int dos = 0;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                //if (i == 0 && Convert.ToInt32(dt.Rows[i]["Balance"]) == 0)
                //{
                //    dos += Convert.ToInt32((enddate-Convert.ToDateTime(dt.Rows[i]["Date"])).TotalDays)-1;
                //}
                  if (i >= 0 && i!= (dt.Rows.Count-1) && Convert.ToInt32(dt.Rows[i]["Balance"]) == 0)
                {
                    dos += Convert.ToInt32((Convert.ToDateTime(dt.Rows[i + 1]["Date"]) - Convert.ToDateTime(dt.Rows[i]["Date"])).TotalDays);
                }
                else if (i == dt.Rows.Count && Convert.ToInt32(dt.Rows[i]["Balance"]) == 0)
                {
                    dos += Convert.ToInt32((enddate - Convert.ToDateTime(dt.Rows[i]["Date"])).TotalDays);
                }
                else if(i == dt.Rows.Count && Convert.ToInt32(dt.Rows[i]["Balance"]) > 0 && dos ==0)
                {
                    dos += Convert.ToInt32((enddate - startdate).TotalDays);
                } 
            }
            return dos;

     }
        public int GetDaysOutOfStock(DateTime startdate, DateTime enddate, int itemid, int storeid)
        {
            var    query = String.Format(@"SELECT DISTINCT   y.DaysOutOfStock
                                     FROM     
                                            ( SELECT  ItemID ,
                                                  CASE WHEN MAX(Date) IS NOT NULL THEN  
                                   DATEDIFF(dd,max(Date),'{1}') 
                                   Else
                                                   DATEDIFF(dd,'{0}','{1}') 
                                    END DaysOutOfStock  
                                                FROM    ( SELECT    ItemID ,
                                                                    Date 
                                                          FROM      ( SELECT    id.ItemID ItemID ,
                                                                                 max(id.EurDate) Date  
                                                                      FROM      IssueDoc id 
            					          JOIN ReceiveDoc rd ON id.RecievDocID = rd.ID
                                                                      WHERE    
            					     id.[EurDate]BETWEEN    '{0}' and'{1}' 
            						AND  id.ItemID = {2}
            						AND id.StoreId = {3}
                                         AND rd.QuantityLeft = 0
                                                                      GROUP BY  id.ItemID,rd.QuantityLeft 
                                                                    ) x
                                                          UNION
                                                          ( SELECT  d.ItemID ItemID ,
                                                                    max(d.EurDate) Date  
                                                            FROM    Disposal d 
            		        	JOIN ReceiveDoc rd ON d.RecID = rd.ID
                                                            WHERE d.EurDate BETWEEN    '{0}' and'{1}' 
            			 AND d.ItemID = {2}
                                                             AND d.StoreID = {3}
                                                             AND d.Losses = 1
            			and   rd.QuantityLeft = 0 
                                                            GROUP BY d.ItemID
                                                          )
                                                        ) x 
                                                GROUP BY x.ItemID 
                                              )y", startdate, enddate, itemid, storeid);


            this.LoadFromRawSql(query); 
            int DaysOutOfStock = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                DaysOutOfStock = Convert.ToInt16(this.DataTable.Rows[0]["DaysOutOfStock"]);
            }
            return DaysOutOfStock;


        }

        public DataTable GetItemsWithLastIssuedOrDisposedDateForUnitBased()
        {
            const string query = @"SELECT DISTINCT  *
FROM    Items itm
        LEFT JOIN ( SELECT  ItemID ,
                            DATEDIFF(dd, MAX(Date), GETDATE()) AS DaysOutOfStock 
                    FROM    ( SELECT    ItemID ,
                                        Date
                              FROM      ( SELECT    id.ItemID ItemID ,
                                                    MAX(id.EurDate) Date 
                                          FROM      IssueDoc id
                                          WHERE     id.ItemID IN (
                                                    SELECT  ItemID
                                                    FROM    ReceiveDoc rd
                                                    GROUP BY ItemID ,UnitID
                                                    HAVING  SUM(rd.QuantityLeft) = 0 )
                                          GROUP BY  id.ItemID ,id.UnitID
                                        ) x
                              UNION
                              ( SELECT  d.ItemID ItemID ,
                                        MAX(d.EurDate) Date 
                                FROM    Disposal d
                                WHERE   ItemID IN (
                                        SELECT  ItemID
                                        FROM    ReceiveDoc rd
                                        GROUP BY ItemID ,UnitID
                                        HAVING  SUM(rd.QuantityLeft) = 0 )
                                GROUP BY d.ItemID ,d.UnitID
                              )
                            ) x
                    GROUP BY x.ItemID
                  ) AS y ON itm.ID = y.ItemID";
            this.LoadFromRawSql(query);
            return this.DataTable;
        }
        public static DataTable AllYears()
        {
            var itm = new Items();
            itm.FlushData();
            itm.LoadFromRawSql(@"SELECT Distinct YEAR(Date)as year from ReceiveDoc
                                    union 
                                    select distinct YEAR(date) as year from IssueDoc
                                    union
                                    select distinct YEAR(date) as year from Disposal
                                    order by year desc");
            return itm.DataTable;
        }
        public static DataTable AllYearsString()
        {
            var itm = new Items();
            itm.FlushData();
            itm.LoadFromRawSql(@"	SELECT Distinct YEAR(Date)as year from ReceiveDoc
                                    union 
                                    select distinct YEAR(date) as year from IssueDoc
                                    union
                                    select distinct YEAR(date) as year from Disposal
                                    union
                                    select distinct null as year  
                                    order by year asc");
            return itm.DataTable;
        }
        public static DataTable AllYearsReport()
        {
            var itm = new Items();
            itm.FlushData();
            itm.LoadFromRawSql(@"SELECT Distinct CAST(YEAR(Date)AS nvarchar)as year from ReceiveDoc
                                    union 
                                    select distinct CAST(YEAR(Date)AS nvarchar)as year from IssueDoc
                                    union
                                    select distinct CAST(YEAR(Date)AS nvarchar)as year from Disposal
                                    order by year desc");
            return itm.DataTable;
        }

        public static DataTable AllFiscalYears()
        {
            string query = @"select distinct year(date) as year from receivedoc
                            where month(date)<=10
                            union
                            select year(date)+1 as year from receivedoc
                            where month(date)>10
                            union
                            select distinct year(date) as year from issuedoc
                            where month(date)<=10
                            union
                            select year(date)+1 as year from issuedoc
                            where month(date)>10
                            union
                            select distinct year(date) as year from disposal
                            where month(date)<=10
                            union
                            select year(date)+1 as year from disposal
                            where month(date)>10
	                        ORDER BY YEAR DESC";
            BLL.Items itm = new Items();
            itm.LoadFromRawSql(query);
            return itm.DataTable;
        }

        /// <summary>
        ///  Returns the commodites by type
        /// </summary>
        /// <param name="commodityType">0 - All Items</param>
        /// <returns></returns>
        public static DataTable GetActiveItemsByCommodityType(int commodityType)
        {
            string query = "";

            // let 0 mean all items
            if (commodityType == 0)
            {
                query = string.Format("select v.Name as CommodityType,v.TypeID , *, " +
                                  " CASE WHEN (SELECT COUNT(*) from ItemManufacturer i where i.ItemID = v.ID) > 0 then 1 else 0 end as HasManufacturer, IsSelected = cast( 0 as bit) " +
                                  " from vwGetAllItems v where v.IsInHospitalList = 1 " +
                                  "  ORDER BY v.FullItemName");
            }
            else
            {
                query = string.Format("select v.Name as CommodityType, v.TypeID , *, " +
                                  " CASE WHEN (SELECT COUNT(*) from ItemManufacturer i where i.ItemID = v.ID) > 0 then 1 else 0 end as HasManufacturer, IsSelected = cast( 0 as bit) " +
                                  " from vwGetAllItems v " +
                                  " where v.IsInHospitalList = 1 and v.TypeID = '{0}' ORDER BY v.FullItemName",
                                  commodityType);
            }

            Items itms = new Items();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }
        public static DataTable GetActiveItemsByCommodityTypeids(string commodityTypeids)
        {
            string     query = string.Format(@"select v.Name as CommodityType, v.TypeID, *,
                                   CASE WHEN(SELECT COUNT(*) from ItemManufacturer i where i.ItemID = v.ID) > 0 then 1 else 0 end as HasManufacturer, IsSelected = cast(0 as bit)
                                    from vwGetAllItems v
                                    where v.IsInHospitalList = 1 and v.TypeID in ({0}) ORDER BY v.FullItemName",
                                commodityTypeids); 
             

            Items itms = new Items();
            itms.LoadFromRawSql(query);
            return itms.DataTable;
        }

        public DataTable GetAllItems(int inList)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} ORDER BY ItemName", inList));
            return this.DataTable;
        }

        public DataTable GetAllItems(int inList,int commodityTypeID)
        {
            this.FlushData();
            var query =
                String.Format(
                    "SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND TypeID = {1} ORDER BY ItemName",
                    inList, commodityTypeID);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetAllItems(int inList, int storeId, int commodityTypeID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No, case when ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) Then 'Yes' Else 'No' END AS BeenReceived, * FROM vwGetAllItems WHERE IsInHospitalList = {0} AND TypeID = {2} ORDER BY ItemName", inList, storeId,commodityTypeID));
            return this.DataTable;
        }
        /**
         * The difference between this and the other default one is that this one loads the item with all the neccessary realtionship datas
         * */
        public Boolean GetItemByPrimaryKey(int pk)
        {
            this.FlushData();
            return this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ID = {0}", pk));
        }

        public int CountAllItems()
        {
            this.FlushData();
            this.LoadFromRawSql("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'DrugRRF'");
            return this.DataTable.Rows.Count;
        }



        public int CountEDLItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND EDL = 0 AND Name = 'Drug'"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetEDLItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND EDL = 0 AND Name = 'Drug'"));
            return this.DataTable;
        }

        public int CountFreeItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND IsFree = 1 AND Name = 'Drug'"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetFreeItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND IsFree = 1 AND Name = 'Drug'"));
            return this.DataTable;
        }

        public DataTable GetVitalItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND VEN = 'V' AND Name = 'Drug'"));
            return this.DataTable;
        }

        public int CountRefrigeratedItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Refrigeratored = 1"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetRefrigeratedItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Refrigeratored = 1"));
            return this.DataTable;
        }

        public int CountPediatricItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Pediatric = 1"));
            return this.DataTable.Rows.Count;
        }

        public DataTable GetPediatricItems()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND Name = 'Drug' AND Pediatric = 1"));
            return this.DataTable;
        }

        public DataTable GetAllItem()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,*, " +
                                              "( ItemName + ' - ' + Unit + ' - ' + Strength) as DrugName FROM vwGetAllItems ORDER BY ItemName"));
            return this.DataTable;
        }

        public DataTable GetAllItemByTypeId(int typeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,*, ( ItemName + ' - ' + DosageForm + ' - ' + Strength) as DrugName FROM vwGetAllItems  where TypeID=typeId ORDER BY ItemName",typeId));
            return this.DataTable;
        }

        public DataTable GetAllSupply()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,* FROM vwGetAllItems Where Name = 'Supply' AND IsInHospitalList = 1  ORDER BY ItemName"));

            return this.DataTable;
        }

        public DataTable GetAllSuppliesAll()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems Where Name = 'Supply' ORDER BY ItemName"));

            return this.DataTable;
        }

        public DataTable GetAllItemWithBalance()
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemBalance ORDER BY ItemName"));
            return this.DataTable;
        }

        public DataTable GetItemById(int itemId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ID = {0}", itemId));
            return this.DataTable;
        }

        public DataTable GetItemByKeyword(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ItemName LIKE '{0}%' AND Name = 'Drug'   ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetSupplyByKeyword(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE ItemName LIKE '{0}%' AND Name = 'Supply'  ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetItemByKeywordInList(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND ItemName LIKE '{0}%'  AND Name = 'Drug' ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetSupplyByKeywordInList(string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND ItemName LIKE '{0}%'  AND Name = 'Supply' ORDER BY ItemName", itemName));
            return this.DataTable;
        }

        public DataTable GetItemsByProgram(int programId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY FullItemName) AS No,* FROM vwGetItemPrograms WHERE ProgramID = {0} ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable GetSupplyByProgram(int programId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT ROW_NUMBER() OVER (ORDER BY ItemName) AS No,* FROM vwGetSupplyPrograms WHERE ProgramID = {0} ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsByProgram(int programId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) ORDER BY ItemName", programId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSuppliesByProgram(int programId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc Where StoreID = {1}) ORDER BY ItemName", programId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyPrograms WHERE ProgramID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", programId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSupply(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName"));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", storeId));
            }
            return this.DataTable;
        }

        public DataTable GetItemsBySupplier(int supplierId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemSuppliers WHERE SupplierID = {0}  ORDER BY ItemName", supplierId));
            return this.DataTable;
        }

        public DataTable GetItemsByDU(int duId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("select * from vwGetAllItems where ID in (select ItemID from IssueDoc where ReceivingUnitID = {0}) ORDER BY ItemName", duId));
            return this.DataTable;
        }

        public DataTable GetItemsByProduct(int productId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE ProductID = {0}  ORDER BY ItemName", productId));
            return this.DataTable;
        }

        public DataTable GetItemsBySubCategory(int subCategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0}  ORDER BY ItemName", subCategoryId));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsBySubCategory(int subCategoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc where StoreID = {1}) ORDER BY ItemName", subCategoryId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE SubCategoryID = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", subCategoryId));
            return this.DataTable;
        }

        public DataTable GetSupplyByCategory(int CategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0}  ORDER BY ItemName", CategoryId));
            return this.DataTable;
        }

        public DataTable ExcludeSupplyByCategory(int CategoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0} ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE StoreID = {1}) ORDER BY ItemName", CategoryId, storeId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetSupplyByCategory WHERE CategoryID = {0} ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", CategoryId));
            return this.DataTable;
        }

        public DataTable GetItemsByCategory(int categoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0}  ORDER BY ItemName", categoryId));
            return this.DataTable;
        }

        public DataTable ExcluedNeverReceivedItemsByCategory(int categoryId, int storeId)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc) ORDER BY ItemName", categoryId));
            else
                this.LoadFromRawSql(String.Format("SELECT * FROM vwGetItemsByCategory WHERE CategoryId = {0} AND ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE StoreID = {1}) ORDER BY ItemName", categoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Drug' ORDER BY ItemName", storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchForAdj(int storeId, int year)
        {
            this.FlushData();
            // TOFIX: if the the vwGe
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch  WHERE StoreId = {0} AND Name = 'Drug' AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) and not (Year(Date) != {1} and QuantityLeft = 0) ORDER BY ItemName", storeId, year));
            return this.DataTable;
        }

        public DataTable GetCommoditiesReceivedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Supply' ORDER BY ItemName", storeId));
            return this.DataTable;
        }

        public DataTable GetAllItemsReceivedByBatchForAdj(int storeId, int year)
        {
            this.FlushData();
            // TOFIX: if the the vwGe
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch  WHERE StoreId = {0} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) and not (Year(Date) != {1} and QuantityLeft = 0) ORDER BY ItemName", storeId, year));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchByKeyword(string keyword, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {1} AND Name='Drug' AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND ItemName LIKE '{0}%' ORDER BY ID", keyword, storeId));
            return this.DataTable;
        }

        public DataTable GetCommoditiesReceivedByBatchByKeyword(string keyword, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {1} AND Name='Supply' AND ItemName LIKE '{0}%' ORDER BY ID", keyword, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchByCatID(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("select * from vwGetReceivedItemsByBatch where StoreId = {1} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {0}))", categoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsReceivedByBatchBySubCatID(int subCategoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("select * from vwGetReceivedItemsByBatch where StoreId = {1} AND NOT (ExpDate < GETDATE() AND QuantityLeft = 0) AND  ID IN (Select ItemID from ProductsCategory Where SubCategoryID = {0})", subCategoryId, storeId));
            return this.DataTable;
        }

        public DataTable GetItemsIssuedByBatch(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetIssuedItemsByBatch Where StoreId = {0} ", storeId));
            return this.DataTable;
        }

        public Int64 GetQuantityIssuedByBatch(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetIssuedItemsByBatch WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetQuantityIssuedByItemPerMonth(int month, int itemId, int storeId, int year)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT SUM(Quantity) AS Quantity FROM IssueDoc WHERE (IsApproved = 1) AND (ItemID = {1}) AND (MONTH(Date) = {0} AND StoreId = {2} AND Year(Date) = {3})", month, itemId, storeId, year));
            Int64 qunatity = 0;
            if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
            {
                qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetQuantityReceiveByItemPerMonth(int month, int itemId, int storeId, int yr)
        {
            this.FlushData();
            int year = yr;// (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Quantity) AS Quantity FROM ReceiveDoc WHERE (ItemID = {1}) AND (StoreId = {2}) AND (MONTH(Date) = {0} AND Year(Date) = {3})", month, itemId, storeId, year));
            Int64 qunatity = 0;
            if (this.DataTable.Rows[0]["Quantity"].ToString() != "")
            {
                qunatity = Convert.ToInt64(this.DataTable.Rows[0]["Quantity"]);
            }
            return qunatity;
        }

        public double GetCostIssuedByItemPerMonth(int month, int storeId, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM IssueDoc WHERE (IsApproved = 1) AND (MONTH(Date) = {0} AND StoreId = {1} AND Year(Date) = {2})", month, storeId, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public double GetCostIssuedByItemPerMonthForAllStores(int month, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM IssueDoc WHERE (IsApproved = 1) AND (MONTH(Date) = {0} AND Year(Date) = {1})", month, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public double GetCostReceiveByItemPerMonth(int month, int storeId, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM ReceiveDoc WHERE (StoreId = {1}) AND (MONTH(Date) = {0} AND Year(Date) = {2})", month, storeId, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public double GetCostReceiveByItemPerMonthForAllStores(int month, int yr)
        {
            this.FlushData();
            int year = (month < 11) ? yr : yr - 1;
            this.LoadFromRawSql(String.Format("SELECT SUM(Cost * Quantity) AS Cost FROM ReceiveDoc WHERE (MONTH(Date) = {0} AND Year(Date) = {1})", month, year));
            double cost = 0;
            if (this.DataTable.Rows[0]["Cost"].ToString() != "")
            {
                cost = Convert.ToInt64(this.DataTable.Rows[0]["Cost"]);
            }
            return cost;
        }

        public Int64 GetLostQuantity(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetLosses WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public Int64 GetAdjustedQuantity(string batchNo, int itemId, int storeId, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM vwGetAdjustments WHERE BatchNo = '{0}' AND ID = {1} AND StoreId = {2} AND Date between '{3}' and '{4}'", batchNo, itemId, storeId, dt1.ToString(), dt2.ToString()));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["Quantity"]);
            }
            return qunatity;
        }

        public DataTable GetExpiredItemsByBatch(int storeId)
        {
            this.FlushData();
            string query = string.Format("SELECT YEAR(ExpDate) Year, ib.*, (Cost * QuantityLeft) AS Price FROM vwGetReceivedItems ib WHERE (ib.ExpDate <= GETDATE()) AND (ib.Out = 0) AND ib.StoreId = {0} AND (Cost * QuantityLeft) > 0 ORDER BY Price DESC", storeId);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetAllExpiredItemsByBatch(int storeId, DateTime from, DateTime to, int reasonId ,int typeId)
        {
            this.FlushData();
            var whereQ = ((reasonId != 0) ? " AND ReasonId = " + reasonId : "");
            whereQ = whereQ + ((typeId != 0) ? " AND vwGetAllItems.TypeID = " + typeId : "");
          
            var query = string.Format(" SELECT *,ROW_NUMBER() OVER (ORDER BY Disposal.Date DESC) as RowNo,(Disposal.Cost * Disposal.Quantity) AS Price," +
                                      " CASE Losses WHEN 1 then cast(0-Disposal.Quantity as nvarchar) else '+' + cast(Disposal.Quantity as nvarchar) end as" +
                                      " QuantityDetail FROM Disposal JOIN DisposalReasons on Disposal.ReasonId = DisposalReasons.ID JOIN ReceiveDoc on " +
                                      " ReceiveDoc.ID =Disposal.RecID JOIN vwGetAllItems on vwGetAllItems.ID = Disposal.ItemID WHERE Disposal.StoreId = {0} " +
                                      " AND Disposal.EurDate BETWEEN '{1}' AND '{2}'" + whereQ + " ORDER BY FullItemName", storeId, from.ToShortDateString(),to.ToShortDateString());

            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public DataTable GetExpiredItemsByBatch(int storeId, int commodityType ,int reasonId)
        {
            this.FlushData();
            if (reasonId == 1)
            {
            string query =
                string.Format(
                    "SELECT ib.*, (Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch ib WHERE ( ib.TypeID = {1}) AND (ib.ExpDate <= GETDATE()) AND (ib.Out = 0) AND ib.StoreId = {0} AND  ib.ReasonId = {2}",
                    storeId, commodityType, reasonId);
            this.LoadFromRawSql(query);
            return this.DataTable;
            }
            else
            {
                string query =
                string.Format(
                    "SELECT ib.*, (Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch ib WHERE ( ib.TypeID = {1}) AND (ib.Out = 0) AND ib.StoreId = {0} AND  ib.ReasonId = {2}",
                    storeId, commodityType, reasonId);
                this.LoadFromRawSql(query);
                return this.DataTable;
            }
        }

        public DataTable GetExpiredItems(int storeId, int commodityType)
        {
            this.FlushData();
            var query = string.Format("SELECT ib.*, (Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch ib WHERE ( ib.TypeID = {1}) AND (ib.ExpDate < GETDATE()) AND (ib.Out = 1) AND ib.StoreId = {0}",
                        storeId, commodityType);
                this.LoadFromRawSql(query);
                return this.DataTable;
          
        }

        public DataTable GetExpiredItemsByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Drug') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{1}%' AND StoreId = {0} ORDER BY Price DESC", storeId, keyword));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Drug') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{0}%' ORDER BY Price DESC", keyword));
            return this.DataTable;
        }

        public DataTable GetExpiredSupplyByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Supply') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{1}%' AND StoreId = {0} ORDER BY Price DESC", storeId, keyword));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE ( Name = 'Supply') AND (ExpDate <= GETDATE()) AND (Out = 0) AND ItemName LIKE '{0}%' ORDER BY Price DESC", keyword));
            return this.DataTable;
        }

        public object[] CountExpiredItemsAndAmount(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("Select Count(*) AS Qty ,Sum(QuantityLeft * Cost) AS Price From ReceiveDoc where QuantityLeft > 0 And ExpDate < GETDATE() AND StoreID = {0}", storeId));
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        }


        public object[] CountExpiredItemsAndAmountByCategory(int storeId ,int typeID)
        {
            this.FlushData();
            string query =
                string.Format(
                    "Select Count(*) AS Qty ,Sum(QuantityLeft * rd.Cost) AS Price " +
                    "From ReceiveDoc rd join vwGetAllItems vw on rd.ItemID = vw.ID where QuantityLeft > 0 And ExpDate < GETDATE() AND StoreID = {0} and TypeID = {1} and vw.IsInHospitalList = 1 and rd.Date between '11/1/2005' and '9/18/2006'",
                    storeId, typeID);
            this.LoadFromRawSql(query);
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        } 
        public object[] CountExpiredItemsAndAmountByCategory(int storeId, int typeID ,DateTime dt1 ,DateTime dt2)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                       SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                FROM   ReceiveDoc rd
                                       JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                WHERE  QuantityLeft > 0
                                       AND ExpDate < GETDATE()
                                       AND StoreID =  {0}
                                       AND TypeID =  {1}
                                       AND vw.IsInHospitalList = 1", storeId, typeID);
            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                       SUM(ISNULL(QuantityLeft, 0) * ISNULL(rd.Cost, 0)) AS Price
                                FROM   ReceiveDoc rd
                                       JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                WHERE  QuantityLeft > 0
                                       AND ExpDate < GETDATE()
                                       AND StoreID =  {0} 
                                       AND vw.IsInHospitalList = 1",  storeId);
            }

            this.LoadFromRawSql(query);
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        }
        public object[] CountExpiredItemsAndAmountLossAdjByCategory(int storeId, int typeID, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@" SELECT COUNT(*) QTY ,
                                           SUM(ISNULL(d.Quantity,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   Disposal d
                                           JOIN DisposalReasons dr ON d.ReasonId = dr.ID
                                           JOIN ReceiveDoc rd ON rd.ID = d.RecID
                                           JOIN vwGetAllItems va ON va.ID = d.ItemID
                                    WHERE  dr.Reason LIKE 'Expired'
                                           AND rd.StoreID = {0}
                                           AND va.TypeID = {1}
                                           AND va.IsInHospitalList = 1
                                           AND  d.EurDate   BETWEEN   '{2}' and '{3}'",  storeId, typeID, dt1, dt2);
            }
            else
            {
                query =
                    string.Format(@" SELECT COUNT(*) QTY ,
                                           SUM(ISNULL(d.Quantity,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   Disposal d
                                           JOIN DisposalReasons dr ON d.ReasonId = dr.ID
                                           JOIN ReceiveDoc rd ON rd.ID = d.RecID
                                           JOIN vwGetAllItems va ON va.ID = d.ItemID
                                    WHERE  dr.Reason LIKE 'Expired'
                                           AND rd.StoreID = {0} 
                                           AND va.IsInHospitalList = 1
                                           AND  d.EurDate   BETWEEN   '{1}' and '{2}'", storeId, dt1, dt2);
            }

            this.LoadFromRawSql(query);
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;

        }
        public object[] CountExpiredItemsAndAmountByCategoryForAllStoresCurrent(int typeID)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  QuantityLeft > 0
                                           AND ExpDate < GETDATE()
                                           AND TypeID = {0}
                                           AND vw.IsInHospitalList = 1 ", typeID);
            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  QuantityLeft > 0
                                           AND ExpDate < GETDATE()
                                           AND vw.IsInHospitalList = 1");
            }

            this.LoadFromRawSql(query);
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        } 
      public object[] CountExpiredItemsAndAmountLossandAdjByCategoryForAllStores(int typeID, DateTime dt1, DateTime dt2)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) QTY ,
                                           SUM(ISNULL(d.Quantity,0) * ISNULL(d.Cost,0)) AS Price
                                    FROM   Disposal d
                                           JOIN DisposalReasons dr ON d.ReasonId = dr.ID 
                                           JOIN vwGetAllItems vw ON vw.ID = d.ItemID
                                    WHERE  dr.Reason LIKE 'Expired'
                                           AND TypeID = {0}
                                           AND vw.IsInHospitalList = 1
                                           AND d.EurDate
                                           BETWEEN '{1}' AND '{2}'",
                        typeID, dt1, dt2);
            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) QTY ,
                                           SUM(ISNULL(d.Quantity ,0)* ISNULL(d.Cost,0)) AS Price
                                    FROM   Disposal d
                                           JOIN DisposalReasons dr ON d.ReasonId = dr.ID 
                                           JOIN vwGetAllItems vw ON vw.ID = d.ItemID
                                    WHERE  dr.Reason LIKE 'Expired'
                                           AND vw.IsInHospitalList = 1
                                           AND d.EurDate
                                           BETWEEN  '{0}' and '{1}'", dt1, dt2);
            }

            this.LoadFromRawSql(query);
            object[] obj = new object[2];
            obj[0] = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt32(this.DataTable.Rows[0]["Qty"]) : 0);
            obj[1] = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);
            return obj;
        }

        public DataTable GetExpiredItemsByID(int storeId, int itemId)
        {
            this.FlushData();
            var query = string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID = {1} ORDER BY ID", storeId, itemId);
            this.LoadFromRawSql(query);
            return this.DataTable;
        }

        public Int64 GetExpiredQtyItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM " +
                                              "ReceiveDoc WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND " +
                                              "QuantityLeft > 0 AND StoreId = {0} AND ID = {1} ", storeId, itemId));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                //qunatity---lmao
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
            }
            return qunatity;
        }

        public object[] GetExpiredQtyAmountItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            Int64 quantity = 0;
            double price = 0;
            this.LoadFromRawSql(string.Format("SELECT * ,(Cost * QuantityLeft) AS Price  FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID = {1} ", storeId, itemId));
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                quantity = quantity + Convert.ToInt64(dv["QuantityLeft"]);
                price = price + Convert.ToDouble(dv["Price"]);
            }
            object[] obj = { quantity, price };
            return obj;
        }

        public Int64 GetNearlyExpiredQtyItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) AND ID = {1}", storeId, itemId));
            Int64 qunatity = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
            }
            return qunatity;
        }

        public object[] GetNearlyExpiredQtyAmountItemsByID(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT *,(Cost * QuantityLeft) AS Price FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) AND ID = {1}", storeId, itemId));
            Int64 qunatity = 0;
            double price = 0;
            foreach (DataRowView dv in this.DataTable.DefaultView)
            {
                if (dv["QuantityLeft"] == DBNull.Value)
                {
                    dv["QuantityLeft"] = 0;
                }
                qunatity = qunatity + Convert.ToInt64(dv["QuantityLeft"]);
                if (dv["Price"] == DBNull.Value)
                {
                    dv["Price"] = 0;
                }
                price = price + Convert.ToDouble(dv["Price"]);
            }
            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] CountNearlyExpiredQtyAmount(int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT Count(*) AS Qty,Sum(QuantityLeft * Cost) AS Price FROM vwGetReceivedItems WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (QuantityLeft > 0) ", storeId));
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] CountNearlyExpiredQtyAmountByCategory(int storeId ,int typeID)
        {
            this.FlushData();
            string query =
                string.Format(
                    "SELECT Count(*) AS Qty,Sum(QuantityLeft * rd.Cost) AS Price FROM ReceiveDoc rd " +
                    "Join vwGetAllItems vw on rd.ItemID = vw.ID WHERE StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (QuantityLeft > 0) AND TypeID = {1} and rd.Date between '11/1/2005' and '9/18/2006'",
                    storeId, typeID);
            this.LoadFromRawSql(query);
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }
        public object[] CountNearlyExpiredQtyAmountByCategory(int storeId, int typeID,int year)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                            AND rd.ExpDate  BETWEEN GETDATE() AND GETDATE() + 185
                                           AND vw.IsInHospitalList = 1 
                                          AND  TypeID ={2}
                                          AND rd.StoreID ={1}", year, storeId, typeID);

            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                            AND rd.ExpDate  BETWEEN GETDATE() AND GETDATE() + 185
                                           AND vw.IsInHospitalList = 1  
                                          AND rd.StoreID ={1}", year,storeId);
            }

            this.LoadFromRawSql(query);
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }
        public object[] CountNearlyExpiredQtyAmountByCategoryCurrent(int storeId, int typeID)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  StoreID = {0}
                                           AND ( ExpDate
                                           BETWEEN GETDATE() AND GETDATE() + 185
                                               )
                                           AND ( QuantityLeft > 0 )
                                           AND TypeID = {1}",  storeId, typeID );
            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  StoreID = {0}
                                           AND ( ExpDate
                                           BETWEEN GETDATE() AND GETDATE() + 185
                                               )
                                           AND ( QuantityLeft > 0 )",  storeId );
            }

            this.LoadFromRawSql(query);
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }
        public object[] CountNearlyExpiredQtyAmountByCategoryForAllStoresCurrent(int typeID)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  ( ExpDate
                                           BETWEEN GETDATE() AND GETDATE() + 185
                                           )
                                           AND ( QuantityLeft > 0 )
                                           AND TypeID = {0}", typeID);
            }
            else
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(QuantityLeft,0) * ISNULL(rd.Cost,0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  ( ExpDate
                                           BETWEEN GETDATE() AND GETDATE() + 185
                                           )
                                           AND ( QuantityLeft > 0 )");
            }

            this.LoadFromRawSql(query);
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] CountNearlyExpiredQtyAmountByCategoryForAllStores(int typeID, int yr, DateTime dt2)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    string.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0}
                                         --  AND rd.ExpDate > DATEADD(DAY, 185, '{1}')
                                            AND rd.ExpDate  BETWEEN GETDATE() AND GETDATE() + 185
                                           AND vw.IsInHospitalList = 1 
                                          AND  TypeID ={2}", yr,dt2,typeID );
            }
            else
            {
                query =
                    string.Format(@" SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS Price
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0}
                                           AND rd.ExpDate   BETWEEN GETDATE() AND GETDATE() + 185 
                                           AND vw.IsInHospitalList = 1  ", yr,dt2);
            }

            this.LoadFromRawSql(query);
            Int64 qunatity = 0;
            double price = 0;
            qunatity = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
            price = ((this.DataTable.Rows.Count > 0) ? ((this.DataTable.Rows[0]["Price"].ToString() != "") ? Convert.ToDouble(this.DataTable.Rows[0]["Price"]) : 0) : 0);

            object[] obj = { qunatity, price };
            return obj;
        }

        public object[] GetSOHQtyAmount(int itemId, int storeId)
        {
            //i think it needs a date for the physical inventory part
            this.FlushData();
            this.LoadFromRawSql(String.Format("select Sum(QuantityLeft)As SOH,Sum(QuantityLeft * Cost)As SOHPrice from ReceiveDoc where ItemID = {0} AND StoreID = {1} Group by ItemId", itemId, storeId));
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = Convert.ToInt64(this.DataTable.Rows[0]["SOH"]);
                sohPrice = Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]);
            }
            this.FlushData();
            this.LoadFromRawSql(String.Format("select Sum(PhysicalInventory) AS EndSoh, Sum(PhysicalInventoryPrice) AS EndSohPrice from YearEnd where ItemID = {0} AND StoreID = {1} AND Year = {2}", itemId, storeId));
            if (this.DataTable.Rows.Count > 0)
            {
                soh = soh + Convert.ToInt64(this.DataTable.Rows[0]["EndSoh"]);
                sohPrice = sohPrice + Convert.ToDouble(this.DataTable.Rows[0]["EndSohPrice"]);
            }

            object[] obj = { soh, sohPrice };
            return obj;
        }

        public object[] GetAllSOHQtyAmount(int storeId)
        {
            this.FlushData();
            var query =
                String.Format(
                    "select Count( Distinct ItemID) As Qty, Sum(QuantityLeft * Cost)As SOHPrice from ReceiveDoc where StoreID = {0} AND QuantityLeft > 0",
                    storeId);
            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }

        public object[] GetAllSOHQtyAmountByCategory(int storeId ,int typeID)
        {
            this.FlushData();
            var query =
                String.Format(
                    "select Count( Distinct rd.ItemID) As Qty, Sum(rd.QuantityLeft *rd.Cost)As SOHPrice from ReceiveDoc rd Join vwGetAllItems vw on rd.ItemID =vw.ID where rd.StoreID = {0} AND rd.QuantityLeft > 0 and TypeID ={1} and rd.Date between '11/1/2005' and '9/18/2006'",storeId ,typeID);
            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }
        public object[] GetAllSOHQtyAmountByCategoryCurrent(int storeId, int typeID )
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    String.Format(@"SELECT COUNT(*) AS Qty ,
                                           ISNULL(SUM(ISNULL(rd.QuantityLeft, 0) * ISNULL(rd.Cost, 0)), 0) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  rd.StoreID ={0}
                                           AND rd.QuantityLeft > 0
                                           AND TypeID = {1}", storeId, typeID);
            }
            else
            {
                query =
                    String.Format(@"SELECT COUNT(*) AS Qty ,
                                           ISNULL(SUM(ISNULL(rd.QuantityLeft, 0) * ISNULL(rd.Cost, 0)), 0) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  rd.StoreID ={0}
                                           AND rd.QuantityLeft > 0", storeId);
            }

            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }
        public object[] GetAllSOHQtyAmountByCategory(int storeId, int typeID ,int year)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    String.Format(@"SELECT COUNT(* ) AS Qty ,
                                       SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                           AND vw.IsInHospitalList = 1 
                                           AND rd.storeid ={1}
                                           AND TypeID = {2} ",year, storeId, typeID);
            }
            else
            {
                query =
                    String.Format(@"SELECT COUNT(* ) AS Qty ,
                                       SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                           AND vw.IsInHospitalList = 1 
                                           AND rd.storeid ={1}", year,storeId );
            }

            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }
        public object[] GetAllSOHQtyAmountByCategoryForAllStoresCurrent(int typeID)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    String.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(rd.QuantityLeft, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  rd.QuantityLeft > 0
                                           AND TypeID = {0}", typeID);
            }
            else
            {
                query =
                    String.Format(@"SELECT COUNT(*) AS Qty ,
                                           SUM(ISNULL(rd.QuantityLeft, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  rd.QuantityLeft > 0");
            }

            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }
        public object[] GetAllSOHQtyAmountByCategoryForAllStores(int typeID, int year)
        {
            this.FlushData();
            string query;
            if (typeID != 0)
            {
                query =
                    String.Format(@"SELECT COUNT(* ) AS Qty ,
                                       SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                           AND vw.IsInHospitalList = 1 
                                           AND TypeID = {1} ", year,typeID);
            }
            else
            {
                query =
                    String.Format(@"SELECT COUNT(* ) AS Qty ,
                                       SUM(ISNULL(yr.EBalance, 0) * ISNULL(rd.Cost, 0)) AS SOHPrice
                                    FROM   ReceiveDoc rd
                                           JOIN dbo.YearEnd yr ON rd.ItemID = yr.ItemID
                                           JOIN vwGetAllItems vw ON rd.ItemID = vw.ID
                                    WHERE  EBalance > 0
                                           AND [Year] = {0} 
                                           AND vw.IsInHospitalList = 1", year);
            }

            this.LoadFromRawSql(query);
            Int64 soh = 0;
            double sohPrice = 0;
            if (this.DataTable.Rows.Count > 0)
            {
                soh = ((this.DataTable.Rows.Count > 0) ? Convert.ToInt64(this.DataTable.Rows[0]["Qty"]) : 0);
                sohPrice = ((this.DataTable.Rows.Count > 0) ? Convert.ToDouble(this.DataTable.Rows[0]["SOHPrice"]) : 0);
            }
            object[] obj = { soh, sohPrice };
            return obj;
        }

        public DataTable GetExpiredItemsByBatchByCat(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE Name = 'Drug' AND (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId));
            return this.DataTable;
        }

        public DataTable GetExpiredSupplyByBatchByCat(int categoryId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE Name = 'Supply' AND (ExpDate <= GETDATE()) AND (Out = 0) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId));
            return this.DataTable;
        }

        public DataTable GetExpiredItemsByBatchBySubcat(int subCatId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE (ExpDate <= GETDATE()) AND (Out = 1) AND StoreId = {0} AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID = {1}) ORDER BY ID", storeId, subCatId));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredItemsByBatch(int storeId, int commodityType , DateTime dtCurrent)
        {
            this.FlushData();
            var query = (string.Format("SELECT isnull(Cost,0) Cost, isnull(QuantityLeft,0) QuantityLeft, ib.*,  (isnull(Cost,0) * QuantityLeft) As Price FROM vwGetReceivedItems ib " +
                                       "WHERE ib.TypeID = {1} AND ib.StoreId = {0} AND ib.ExpDate BETWEEN getdate() and dateadd(MONTH,6,GetDate()) AND (ib.Out = 0) ORDER BY Price Desc", storeId, commodityType));
            this.LoadFromRawSql(query);
            DataColumn mos = new DataColumn("MOS", typeof(decimal));
            DataColumn amc = new DataColumn("AMC", typeof(decimal));
            this.DataTable.Columns.Add(mos); 
            this.DataTable.Columns.Add(amc); 
            for (int i = 0; i < this.DataTable.Rows.Count; i++)
            {
                this.DataTable.Rows[i]["MOS"] = this.GetMOS(Convert.ToInt32(this.DataTable.Rows[i]["ItemID"]), storeId, Convert.ToInt32(this.DataTable.Rows[i]["QuantityLeft"]), dtCurrent);
                this.DataTable.Rows[i]["AMC"] = Decimal.Round(Convert.ToDecimal(Builder.CalculateAverageConsumptionForMOS(Convert.ToInt32(this.DataTable.Rows[i]["ItemID"]), storeId, Convert.ToDateTime(this.DataTable.Rows[i]["ExpDate"]).Subtract(TimeSpan.FromDays(180)), Convert.ToDateTime(this.DataTable.Rows[i]["ExpDate"]), CalculationOptions.Monthly)), 2);
            }
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredItemsByBatchReport(int storeId)
        {
            this.FlushData();
            var query = (string.Format(@"SELECT isnull(Cost,0) Cost
                                             , isnull(QuantityLeft,0) QuantityLeft
                                             , ib.*
	                                         , (isnull(Cost,0) * QuantityLeft) As Price 
	                                         , ISNULL(amc.AmcWithDos ,0) AmcWithDos
                                             , CASE 
	                                           WHEN isNull(AmcWithDos, 0) = 0 
	                                           THEN 0 
	                                           ELSE QuantityLeft/AmcWithDos END AS MOS
                                             , CASE 
	                                           WHEN ISNULL(QuantityLeft,0)-(DATEDIFF(MONTH,GetDate(),ib.expDate) * ISNULL(amc.AmcWithDos ,0)) < 0 
	                                           THEN 0 
	                                           ELSE ISNULL(QuantityLeft,0)-(DATEDIFF(MONTH,GetDate(),ib.expDate) * ISNULL(amc.AmcWithDos ,0)) END AS RedistributionQty 
                                        FROM vwGetReceivedItems ib 
                                             LEFT JOIN AmcReport amc on ib.ItemID = amc.ItemID and ib.StoreID = amc.StoreID
                                        WHERE ib.StoreId = {0} AND ib.ExpDate BETWEEN getdate() and dateadd(MONTH,6,GetDate()) AND (ib.Out = 0)
                                        ORDER BY Price Desc", storeId));
            this.LoadFromRawSql(query);
            //this.DataTable.Columns.Add("MOS");
            //this.DataTable.Columns.Add("AMC"); 

            //for (int i = 0; i < this.DataTable.Rows.Count; i++)
            //{
            //    this.DataTable.Rows[i]["MOS"] = this.GetMOS(Convert.ToInt32(this.DataTable.Rows[i]["ItemID"]), storeId, Convert.ToInt32(this.DataTable.Rows[i]["QuantityLeft"]), Convert.ToDateTime(this.DataTable.Rows[i]["ExpDate"]));
             //   this.DataTable.Rows[i]["AMC"] = Decimal.Round(Convert.ToDecimal(Builder.CalculateAverageConsumptionForMOS(Convert.ToInt32(this.DataTable.Rows[i]["ItemID"]), storeId, Convert.ToDateTime(this.DataTable.Rows[i]["ExpDate"]).Subtract(TimeSpan.FromDays(180)), Convert.ToDateTime(this.DataTable.Rows[i]["ExpDate"]), CalculationOptions.Monthly)),2);
            //}
            return this.DataTable;
        }

        public decimal GetMOS(int itemId, int storeId, int qty, DateTime dtCurrent)
        {
            var pipline = new GeneralInfo();
            pipline.LoadAll();
            //int min = pipline.Min;
            //int max = pipline.Max;
            //double eop = pipline.EOP;
            //Items itmB = new Items();
           // Balance bal = new Balance();
            //Int64 AMC = bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);
            double AMC = Builder.CalculateAverageConsumptionForMOS(itemId,storeId,dtCurrent.Subtract(TimeSpan.FromDays(180)), dtCurrent,CalculationOptions.Monthly);
                //bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);//dtBal.Rows.Count <= 0) ? 0 : ((dtBal.Rows[0]["AMC"].ToString() != "") ? Convert.ToInt64(dtBal.Rows[0]["AMC"]) : 0);
            //double MinCon = AMC * min;
            //double maxCon = AMC * max;
            //double eopCon = AMC * (eop + 0.25);

            //Int64 SOH = bal.GetSOH(itemId, storeId, dtCurrent.Month, dtCurrent.Year);

            var MOS = (AMC != 0) ? (qty / Convert.ToDecimal(AMC)) : 0;
            MOS = Decimal.Round(MOS, 1);
            return MOS;
        }

        public decimal GetMOS(int itemId, int storeId, DateTime dtCurrent)
        {
            GeneralInfo pipline = new GeneralInfo();
            pipline.LoadAll();
            int min = pipline.Min;
            int max = pipline.Max;
            double eop = pipline.EOP;
            Items itmB = new Items();
            Balance bal = new Balance();
           //Int64 AMC= bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);
            double AMC = Builder.CalculateAverageConsumption(itemId,storeId,DateTime.Today.Subtract(TimeSpan.FromDays(180)), dtCurrent, CalculationOptions.Monthly);
                //bal.CalculateAMC(itemId, storeId, dtCurrent.Month, dtCurrent.Year);//dtBal.Rows.Count <= 0) ? 0 : ((dtBal.Rows[0]["AMC"].ToString() != "") ? Convert.ToInt64(dtBal.Rows[0]["AMC"]) : 0);
            double MinCon = AMC * min;
            double maxCon = AMC * max;
            double eopCon = AMC * (eop + 0.25);

            Int64 SOH = bal.GetSOH(itemId, storeId, dtCurrent.Month, dtCurrent.Year);

            decimal MOS = (AMC != 0) ? (SOH / Convert.ToDecimal(AMC)) : 0;
            MOS = Decimal.Round(MOS, 1);
            return MOS;
        }

        public DataTable GetNearlyExpiredItemsByBatchByKeyword(int storeId, string keyword)
        {
            this.FlushData();
            if (storeId != 0)
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) As Price FROM vwGetReceivedItemsByBatch WHERE TypeID = {2} AND ItemName LIKE '{1}%' AND StoreId = {0} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) ORDER BY Price Desc", storeId, keyword,Type.Constants.Pharmacuticals));
            else
                this.LoadFromRawSql(string.Format("SELECT *,(Cost * QuantityLeft) As Price FROM vwGetReceivedItemsByBatch WHERE TypeID = {1} AND ItemName LIKE '{0}%' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0) ORDER BY Price Desc", keyword, Type.Constants.Pharmacuticals));
            return this.DataTable;
        }

    

       


        public DataTable GetNearlyExpiredItemsByBatchByCatId(int storeId,int commodityType, int categoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND TypeID = {2} AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID IN (Select ID from SubCategory where CategoryID = {1})) ORDER BY ID", storeId, categoryId,commodityType));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredItemsByBatchBySubcatId(int storeId, int subCategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Drug' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ProductsCategory Where SubCategoryID ={1}) ORDER BY ID", storeId, subCategoryId));
            return this.DataTable;
        }

        public DataTable GetNearlyExpiredSupplyByBatchByCatId(int storeId, int CategoryId)
        {
            this.FlushData();
            this.LoadFromRawSql(string.Format("SELECT * FROM vwGetReceivedItemsByBatch WHERE StoreId = {0} AND Name = 'Supply' AND (ExpDate BETWEEN GETDATE() AND GETDATE() + 185 ) AND (Out = 0)AND ID IN (Select ItemID from ItemSupplyCategory Where CategoryID ={1}) ORDER BY ID", storeId, CategoryId));
            return this.DataTable;
        }

        public DateTime GetLastIssuedDate(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT TOP (1) Date FROM IssueDoc WHERE (StoreId = {1}) AND (ItemID = {0})ORDER BY Date DESC", itemId, storeId));
            DateTime dt = (this.DataTable.Rows.Count > 0) ? Convert.ToDateTime(this.DataTable.Rows[0]["Date"]) : new DateTime();

            return dt;
        }

        public DateTime GetLastReceiveDate(int itemId, int storeId)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT TOP (1) Date FROM ReceiveDoc WHERE (StoreID = {1}) AND (ItemID = {0})ORDER BY Date DESC", itemId, storeId));
            DateTime dt = (this.DataTable.Rows.Count > 0) ? Convert.ToDateTime(this.DataTable.Rows[0]["Date"]) : new DateTime();

            return dt;
        }

        public int CountVitalItems()
        {
            this.FlushData();
            this.LoadFromRawSql("SELECT * FROM vwGetAllItems WHERE IsInHospitalList = 1 AND VEN = 'V' AND Name = 'Drug'");
            return this.DataTable.Rows.Count;
        }
        public DataTable GetAllItems()
        {
            this.FlushData();
            this.LoadFromRawSql("SELECT * FROM vwGetAllItems");
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItems(int storeId, int commodityTypeID)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND TypeID = {0} ORDER BY ItemName",commodityTypeID));
            }
            else
            {
               //Previously written var query =String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND TypeID = {1} ORDER BY ItemName",
                        //storeId, commodityTypeID);
                var query = String.Format(" select * from vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc rd  WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND TypeID = {1} ORDER BY ItemName",storeId, commodityTypeID);
                this.LoadFromRawSql(query);
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNoCategoryForHandlingUnit(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND TypeID = {0} ORDER BY ItemName"));
            }
            else
            {
                var query = String.Format("select Distinct(vw.ID),vw.FullItemName,vw.StockCode,vw.DosageForm,vw.StockCode,vw.Strength ,rd.UnitID,vw.ItemName  from vwGetAllItems vw left join ReceiveDoc rd on vw.ID =rd.ItemID where (rd.StoreID = {0}) AND (IsInHospitalList = 1) ORDER BY ItemName", storeId);
                this.LoadFromRawSql(query);
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNoCategoryForHandlingUnitOptimized(int storeId, int year)
        {
            this.FlushData();
            //bereket
            //the inline query has to be changed to stored procedure
            //and also excluding the already existing items in yearEnd will be implemented
            string sql = @"SELECT DISTINCT(vw.ID),vw.FullItemName,vw.StockCode,vw.DosageForm,vw.StockCode,
                            vw.Strength ,rd.UnitID,vw.ItemName
                        FROM vwGetAllItems vw left join ReceiveDoc rd on vw.ID =rd.ItemID
                        WHERE (rd.StoreID = {0}) AND (IsInHospitalList = 1)
                            AND (vw.ID NOT IN (SELECT ItemId FROM dbo.yearEnd WHERE Year = {1}))
                        ORDER BY ItemName";

            var query = String.Format(sql, storeId, year);
            this.LoadFromRawSql(query);

            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsForHandlingUnit(int storeId, int commodityTypeID)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND TypeID = {0} ORDER BY ItemName", commodityTypeID));
            }
            else
            {
                var query = String.Format(" select Distinct(vw.ID),vw.FullItemName,vw.StockCode,vw.DosageForm,vw.StockCode,vw.Strength ,rd.UnitID ,vw.ItemName from vwGetAllItems vw left join ReceiveDoc rd on vw.ID =rd.ItemID where (rd.StoreID = {0}) AND (IsInHospitalList = 1) AND TypeID = {1} ORDER BY ItemName", storeId, commodityTypeID);
                this.LoadFromRawSql(query);
            }
            return this.DataTable;
        }
        public DataTable ExcludeNeverReceivedItemsNoCategory(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1)  ORDER BY ItemName"));
            }
            else
            {
                var query = String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1)  ORDER BY ItemName", storeId);
                this.LoadFromRawSql(query);
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNoCategoryOptimized(int storeId, int year)
        {
            this.FlushData();

            var query = String.Format(@"SELECT * FROM  dbo.vwGetAllItems vw
                                        WHERE (vw.ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) 
                                        AND (IsInHospitalList = 1)  
                                        AND (vw.ID NOT IN (SELECT ItemId FROM dbo.yearEnd WHERE Year = {1}))
                                        ORDER BY ItemName", storeId, year);
            this.LoadFromRawSql(query);

            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{0}%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", itemName));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{1}%' AND(ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", storeId, itemName));
            }
            return this.DataTable;
        }

        public DataTable GetReceivedNotIssuedItems(int storeId, int commodityTypeID)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND (ID IN (SELECT ItemID FROM  dbo.IssueDoc WHERE (StoreID = {0}))) and TypeID = {1} ORDER BY ItemName", storeId,commodityTypeID));
            return this.DataTable;
        }

        public DataTable GetReceivedNotIssuedItemsByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName LIKE '{1}%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND (ID IN (SELECT ItemID FROM  dbo.IssueDoc WHERE (StoreID = {0}))) ORDER BY ItemName", storeId, itemName));
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedItemsNeverIssued(int storeId)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName"));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Drug' ORDER BY ItemName", storeId));
            }
            return this.DataTable;
        }

        public DataTable ExcludeNeverReceivedSupplyByKeyword(int storeId, string itemName)
        {
            this.FlushData();
            if (storeId == 0)
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName like '0%' AND (ID IN (SELECT ItemID FROM  dbo.ReceiveDoc)) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", itemName));
            }
            else
            {
                this.LoadFromRawSql(String.Format("SELECT * FROM  dbo.vwGetAllItems WHERE ItemName like '1%' AND(ID IN (SELECT ItemID FROM  dbo.ReceiveDoc WHERE (StoreID = {0}))) AND (IsInHospitalList = 1) AND Name = 'Supply' ORDER BY ItemName", storeId, itemName));
            }
            return this.DataTable;
        }

        public bool HasTransactions(int itemId)
        {
            bool tran = false;
            this.FlushData();
            this.LoadFromRawSql(String.Format("select ID,ItemID from IssueDoc where ItemID = {0} union select ID,ItemID from ReceiveDoc where ItemID = {0}", itemId));
            if (this.DataTable.Rows.Count > 0)
                tran = true;
            return tran;
        }


        private void LoadItemsByStorageType(string storageType)
        {
            this.LoadFromRawSql(String.Format("SELECT *, ( ItemName + ' - ' + DosageForm + ' - ' + Strength) as DrugName FROM vwGetAllItems Where Name = 'Drug' and StorageTypeID = {0} ORDER BY ItemName", storageType));
        }

        public static DataTable GetItems(string storageType)
        {
            Items itms = new Items();
            itms.LoadItemsByStorageType(storageType);
            return itms.DataTable;
        }

        

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="fromYear">In Ethiopian Calendar</param>
        /// <param name="fromMonth">In Ethiopian Calendar</param>
        /// <param name="toYear">In Ethiopian Calendar</param>
        /// <param name="toMonth">In Ethiopian Calendar</param>
        /// <returns></returns>
        public DataTable GetRRFReportByUnit(int storeId ,int fromYear, int fromMonth, int toYear, int toMonth)
        {
            var balance = new Balance();
            var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
            var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
            if (fromMonth != 1)
                fromMonth--;
            else
            {
                fromYear--;
                fromMonth = 12; //Because SOH returns stock until the end of the month
            }
            var dtbl = balance.GetSOHByUnitForRRF(storeId,fromMonth, fromYear);
            var dtbl2 = balance.GetSOHByUnitForRRF(storeId, toMonth, toYear);

            var dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            var dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            //var query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity ,IsNull(A.UnitID ,0) from" +
            //                             " Items left join (select ItemID,UnitID, sum(Quantity) as Quantity from ReceiveDoc rd " +
            //                             "where [Date] between '{0}' and '{1}' and" + " StoreID = {2} group by ItemID,UnitID,SubProgramID) as" +
            //                             " A on Items.ID = A.ItemID left join ItemUnit as iu on A.UnitID =iu.ID AND A.ItemID = iu.ItemID LEFT JOIN dbo.ProgramProduct AS pp ON pp.ItemID =A.ItemID", dt1, dt2, storeId);
            var query = string.Format(@"SELECT  rd.ItemID ID, rd.UnitID ,SUM(Quantity) AS Quantity FROM ReceiveDoc rd JOIN ItemUnit AS iu ON rd.UnitID = iu.ID AND rd.ItemID = iu.ItemID WHERE [Date] BETWEEN '{0}'AND '{1}' AND StoreID = {2} GROUP BY rd.ItemID , rd.UnitID ,rd.SubProgramID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var received = this.DataTable;

            //query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity ,IsNull(A.UnitID ,0) " +
            //                      "from Items left join (select ItemID, UnitID,sum(Quantity) Quantity " +
            //                      "from IssueDoc rd where [Date] between '{0}' and '{1}' and " +
            //                      "StoreID = {2} group by ItemID,UnitID) as A on Items.ID = A.ItemID " +
            //                      "left join ItemUnit as iu on A.UnitID =iu.ID AND A.ItemID = iu.ItemID LEFT JOIN dbo.ProgramProduct AS pp ON pp.ItemID = A.ItemID", dt1, dt2, storeId);
            query = string.Format(@"SELECT  id.ItemID ID,id.UnitID,SUM(Quantity) AS Quantity FROM  dbo.IssueDoc id JOIN ItemUnit AS iu ON id.UnitID = iu.ID AND id.ItemID = iu.ItemID WHERE   [Date] BETWEEN '{0}' AND '{1}' AND StoreID = {2} GROUP BY id.ItemID , id.UnitID ", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var issued = this.DataTable;

            //query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity,IsNull(A.UnitID ,0) from " +
            //                      "Items left join (select ItemID, UnitID,sum(case when Losses = 1 then - Quantity else " +
            //                      "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
            //                      "and StoreID = {2} group by ItemID,UnitID) as A on Items.ID = A.ItemID " +
            //                      "left join ItemUnit as iu on A.UnitID =iu.ID AND A.ItemID = iu.ItemID LEFT JOIN dbo.ProgramProduct AS pp ON pp.ItemID = A.ItemID", dt1, dt2, storeId);
            query = string.Format(@"SELECT  d.ItemID ID ,d.UnitID ,SUM(CASE WHEN Losses = 1 THEN -Quantity ELSE Quantity END) Quantity FROM Disposal d JOIN ItemUnit AS iu ON d.UnitID = iu.ID WHERE [Date] BETWEEN '{0}' AND '{1}'AND StoreID = {2} GROUP BY d.ItemID ,d.UnitID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var lost = this.DataTable;

            query = string.Format(@"SELECT DISTINCT
                                    Items.ID ,
                                    Items.StockCodeDACA ,
                                    Items.Cost ,
                                    CASE Items.Cost
                                      WHEN 0 THEN 1
                                      ELSE ISNULL(Items.Cost, 1)
                                    END AS QtyPerPack
                            FROM    Items");
            // JOIN dbo.ItemUnit iu ON dbo.Items.ID = iu.ItemID
            this.LoadFromRawSql(query);
            var preferredPackSizetbl = DataTable;

            var itm = new Items();
            var daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDateForUnitBased();

            //query=string.Format("select ")

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"] 
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1 
                     && Convert.ToInt32(y["UnitID"]) == Convert.ToInt32(z["UnitID"]) 
                     && Convert.ToInt32(y["ProgramID"]) == Convert.ToInt32(z["ProgramID"]) 
                     select new { 
                         ID = y["ID"],
                         FullItemName = y["FullItemName"], 
                         Unit = y["Unit"],
                         StockCode = y["StockCode"], 
                         BeginingBalance = Convert.ToDouble(y["SOH"]), 
                         ProgramID=y["ProgramID"],
                         UnitID =y["UnitID"],
                         SOH = Convert.ToDouble(z["SOH"]), 
                         Max = Convert.ToInt32(z["Max"]),
                         QtyPerPack = Convert.ToDouble(p["QtyPerPack"]),
                         StockCodeDACA = p["StockCodeDACA"],
                         TypeID=y["TypeID"]
                     }).ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     where Convert.ToInt32(n.UnitID) == Convert.ToInt32(z["UnitID"])     
                     select new { 
                         ID = n.ID, 
                         FullItemName = n.FullItemName,
                         Unit = n.Unit, 
                         StockCode = n.StockCode, 
                         BeginingBalance = n.BeginingBalance, 
                         SOH = n.SOH, 
                         Max = n.Max, 
                         QtyPerPack = n.QtyPerPack,
                         StockCodeDACA =n.StockCodeDACA,
                         ProgramID=n.ProgramID, 
                         Received = z["Quantity"] ,
                         UnitID =n.UnitID,
                         TypeID=n.TypeID
                         }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     where Convert.ToInt32(n.UnitID) == Convert.ToInt32(z["UnitID"]) 
                    select
                         new
                             {
                                 ID = n.ID,
                                 FullItemName = n.FullItemName,
                                 Unit = n.Unit,
                                 StockCode = n.StockCode,
                                 BeginingBalance = n.BeginingBalance,
                                 SOH = n.SOH,
                                 Max = Convert.ToInt32(z["Quantity"]) * 2,
                                 StockCodeDACA =n.StockCodeDACA,
                                 QtyPerPack = n.QtyPerPack,
                                 Received = n.Received,
                                 ProgramID=n.ProgramID,
                                 UnitID =n.UnitID,
                                 Issued = Convert.ToInt32(z["Quantity"]),
                                 TypeID=n.TypeID
                             }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     where Convert.ToInt32(n.UnitID) == Convert.ToInt32(z["UnitID"]) 
                     select new 
                       { 
                           ID = n.ID,
                         FullItemName = n.FullItemName, 
                         Unit = n.Unit, 
                         StockCode = n.StockCode, 
                         BeginingBalance = n.BeginingBalance, 
                         SOH = n.SOH,
                         Max = n.Max,
                         StockCodeDACA = n.StockCodeDACA,
                         QtyPerPack = n.QtyPerPack, 
                         Received = n.Received, 
                         ProgramID=n.ProgramID,
                         Issued = n.Issued, LossAdj = z["Quantity"],
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                        UnitID = n.UnitID,
                        TypeID=n.TypeID
                     }).ToArray();

            
            var t1 = (from n in t
                      join z in daysOutOfStock.AsEnumerable()
                          on n.ID equals z["ID"]
                      select
                          new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = n.LossAdj,
                                  UnitID = n.UnitID,
                                  ProgramID = n.ProgramID,
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                  TypeID = n.TypeID
                              }).ToArray();
            if (t.Length == 0)
            {
                var t2 = (from n in l
                          select
                              new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = 0,
                                  ProgramID = n.ProgramID,
                                  UnitID = n.UnitID,
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),//TODO: This is a quick fix.  We need to take stock status from the last three months.
                                  //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                  MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate)))),
                                  TypeID = n.TypeID
                              }).ToArray();

                //return t;
                // Converting shit into antoher shit.
                // Just because i was not able to read the elemntes of the anonymus type in another method
                var value = new DataTable();
                value.Columns.Add("ID", typeof(int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof(double));
                value.Columns.Add("SOH", typeof(double));
                value.Columns.Add("Max", typeof(double));
                value.Columns.Add("StockCodeDACA", typeof(string));
                value.Columns.Add("QtyPerPack", typeof(double));
                value.Columns.Add("Issued", typeof(double));
                value.Columns.Add("Received", typeof(double));
                value.Columns.Add("LossAdj", typeof(double));
                value.Columns.Add("Quantity", typeof(double));
                value.Columns.Add("DaysOutOfStock", typeof(int));
                value.Columns.Add("MaxStockQty", typeof(double));
                value.Columns.Add("ProgramID", typeof(int));
                value.Columns.Add("UnitID", typeof(int));
                value.Columns.Add("TypeID", typeof(int));
                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                    drv["Quantity"] = v.Quantity;
                    drv["ProgramID"] = v.ProgramID;
                    drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    drv["MaxStockQty"] = v.MaxStockQty;
                    drv["UnitID"] = v.UnitID;
                    drv["TypeID"] = v.TypeID;

                }

                return value;
            }
            else
            {
                var t2 = (from n in t1
                          select
                              new
                                  {
                                      ID = n.ID,
                                      FullItemName = n.FullItemName,
                                      Unit = n.Unit,
                                      StockCode = n.StockCode,
                                      BeginingBalance = n.BeginingBalance,
                                      SOH = n.SOH,
                                      Max = n.Max,
                                      StockCodeDACA = n.StockCodeDACA,
                                      QtyPerPack = n.QtyPerPack,
                                      Received = n.Received,
                                      Issued = n.Issued,
                                      LossAdj = n.LossAdj,
                                      ProgramID = n.ProgramID,
                                      UnitID = n.UnitID,
                                      Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                      DaysOutOfStock =
                              Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                      //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                      //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                      MaxStockQty =
                              ((120*n.Issued)/
                               (60 -
                                Convert.ToInt32(Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate,
                                                                              endDate)))),
                                      TypeID = n.TypeID
                                  }).ToArray();

                //return t;
                // Converting shit into antoher shit.
                // Just because i was not able to read the elemntes of the anonymus type in another method
                var value = new DataTable();
                value.Columns.Add("ID", typeof (int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof (double));
                value.Columns.Add("SOH", typeof (double));
                value.Columns.Add("Max", typeof (double));
                value.Columns.Add("StockCodeDACA", typeof (string));
                value.Columns.Add("QtyPerPack", typeof (double));
                value.Columns.Add("Issued", typeof (double));
                value.Columns.Add("Received", typeof (double));
                value.Columns.Add("LossAdj", typeof (double));
                value.Columns.Add("Quantity", typeof (double));
                value.Columns.Add("DaysOutOfStock", typeof (int));
                value.Columns.Add("MaxStockQty", typeof (double));
                value.Columns.Add("ProgramID", typeof (int));
                value.Columns.Add("UnitID", typeof (int));
                value.Columns.Add("TypeID", typeof (int));
                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                    drv["Quantity"] = v.Quantity;
                    drv["ProgramID"] = v.ProgramID;
                    drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    drv["MaxStockQty"] = v.MaxStockQty;
                    drv["UnitID"] = v.UnitID;
                    drv["TypeID"] = v.TypeID;

                }

                return value;
            }

        }

        public DataTable GetRRFReportWithOutUnit(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            var balance = new Balance();
            var issue = new IssueDoc();
            var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
            var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
            if (fromMonth != 1)
                fromMonth--;
            else
            {
                fromYear--;
                fromMonth = 12; 
            }
            var dtbl = balance.GetSOHForProgramRRF(storeId, fromMonth, fromYear);
            var dtbl2 = balance.GetSOHForProgramRRF(storeId, toMonth, toYear);

            var dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            var dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            var query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from" +
                                         " Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd " +
                                         "where [Date] between '{0}' and '{1}' and" + " StoreID = {2} group by ItemID) as" +
                                         " A on Items.ID = A.ItemID", dt1, dt2, storeId);
            //var query = string.Format("SELECT  ItemID ID,SUM(Quantity) AS Quantity FROM ReceiveDoc rd WHERE   [Date] BETWEEN '{0}' AND '{1}'AND StoreID = {2} GROUP BY ItemID ", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var received = this.DataTable;  
            var isdt = new DateTime(fromYear, fromMonth, 01);
            if (fromMonth < 12)
                isdt = new DateTime(fromYear, fromMonth + 1, 01);
            else if (fromMonth == 12)
                isdt = new DateTime(fromYear + 1, 01, 01);
            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity " +
                                  "from Items left join (select ItemID,sum(Quantity) Quantity " +
                                  "from IssueDoc " +
                                  "where [Date] between '{0}' and '{1}' and StoreID = {2} and IsTransfer = 0 " +
                                  "group by ItemID ) as A on Items.ID = A.ItemID "
                                  , isdt, dt2, storeId);

            //query = string.Format(" SELECT ItemID ID ,SUM(Quantity) Quantity FROM IssueDoc WHERE   [Date] BETWEEN '{0}' AND '{1}' AND StoreID = {2} AND IsTransfer = 0 GROUP BY ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var issued = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from " +
                                  "Items left join (select ItemID,sum(case when Losses = 1 then - Quantity else " +
                                  "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
                                  "and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID "
                                 , dt1, dt2, storeId);

            //query = string.Format("select ItemID ID ,sum(case when Losses = 1 then - Quantity else Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' and StoreID = {2} group by ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var lost = this.DataTable;

            query = string.Format("select distinct Items.ID,Items.StockCodeDACA,Items.Cost, " +
                                  " case Items.Cost when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack " + 
                                  " from Items");
            this.LoadFromRawSql(query);
            var preferredPackSizetbl = DataTable;
            //var daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     orderby y["TypeID"]
                     select new
                     {
                         ID = y["ID"],
                         FullItemName = y["FullItemName"],
                         Unit = y["Unit"],
                         StockCode = y["StockCode"],
                         BeginingBalance = Convert.ToDouble(y["SOH"]),
                         ProgramID = y["ProgramID"],
                         SOH = Convert.ToDouble(z["SOH"]),
                         USOH = Convert.ToDouble(z["Dispatchable"]),
                         Max = Convert.ToInt32(z["Max"]),
                         QtyPerPack = Convert.ToDouble(p["QtyPerPack"]),
                         StockCodeDACA = p["StockCodeDACA"],
                         Status=y["Status"],
                         TypeID=y["TypeID"]
                     }).Distinct().ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         USOH = n.USOH,
                         Max = n.Max,
                         QtyPerPack = n.QtyPerPack,
                         StockCodeDACA = n.StockCodeDACA,
                         ProgramID = n.ProgramID,
                         Received = z["Quantity"],
                         Status = n.Status,
                         TypeID = n.TypeID
                        }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             ID = n.ID,
                             FullItemName = n.FullItemName,
                             Unit = n.Unit,
                             StockCode = n.StockCode,
                             BeginingBalance = n.BeginingBalance,
                             SOH = n.SOH,
                             USOH = n.USOH ,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             StockCodeDACA = n.StockCodeDACA,
                             QtyPerPack = n.QtyPerPack,
                             Received = n.Received,
                             ProgramID = n.ProgramID,
                             Status=n.Status,
                             Issued = Convert.ToInt32(z["Quantity"]),
                             TypeID=n.TypeID
                             }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         USOH = n.USOH ,
                         Max = n.Max,
                         StockCodeDACA = n.StockCodeDACA,
                         QtyPerPack = n.QtyPerPack,
                         Received = n.Received,
                         ProgramID = n.ProgramID,
                         Issued = n.Issued,
                         Status =n.Status,
                         LossAdj = z["Quantity"],
                         // Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                         Quantity = (n.Max - n.USOH < 0) ? 0 : n.Max - n.USOH,
                         TypeID =n.TypeID
                         }).ToArray();
            if (t.Length == 0)
            {
                var t2 = (from n in l
                          select
                              new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  USOH = n.USOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = 0,
                                  ProgramID = n.ProgramID,
                                  Status = n.Status,
                                  //Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  Quantity = (n.Max - n.USOH < 0) ? 0 : n.Max - n.USOH,
                                  DaysOutOfStock = ( n.BeginingBalance == 0 )? GetDOSNoBegginingBalance(startDate, endDate, Convert.ToInt32(n.ID), storeId) + GetDaysOutOfStockBinCard(startDate, endDate, Convert.ToInt32(n.ID), storeId, n.BeginingBalance) : GetDaysOutOfStockBinCard(startDate, endDate, Convert.ToInt32(n.ID), storeId,n.BeginingBalance),
                                 // DaysOutOfStock = GetDaysOutOfStock(startDate, endDate,Convert.ToInt32(n.ID), storeId),
                                 //  Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                 //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                 //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                 // MaxStockQty =((120*n.Issued)/(60 -Convert.ToInt32(Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate,
                                 // endDate)))),
                                  TypeID = n.TypeID
                                  }).ToArray();

                var value = new DataTable();
                value.Columns.Add("ID", typeof (int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof(double));
                value.Columns.Add("SOH", typeof(double));
                value.Columns.Add("Max", typeof (double));
                value.Columns.Add("StockCodeDACA", typeof (string));
                value.Columns.Add("QtyPerPack", typeof (double));
                value.Columns.Add("Issued", typeof (double));
                value.Columns.Add("Received", typeof (double));
                value.Columns.Add("LossAdj", typeof (double));
                value.Columns.Add("Quantity", typeof (double));
                value.Columns.Add("DaysOutOfStock", typeof (int));
                //value.Columns.Add("MaxStockQty", typeof (double));
                value.Columns.Add("ProgramID", typeof (int));
                value.Columns.Add("Status", typeof (string));
                value.Columns.Add("TypeID", typeof (int));
                value.Columns.Add("LastDUSoh", typeof (decimal));
                value.Columns.Add("USOH", typeof (decimal));
                value.Columns.Add("TotalSOH", typeof (decimal));

                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["USOH"] = v.USOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                   // drv["Quantity"] = (v.Max - v.SOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2) < 0) ? 0 : v.Max - v.SOH- issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["Quantity"] = (v.Max - v.USOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2) < 0) ? 0 : v.Max - v.USOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["ProgramID"] = v.ProgramID;
                    drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    //drv["MaxStockQty"] = v.MaxStockQty;
                    drv["Status"] = v.Status;
                    drv["TypeID"] = v.TypeID;
                    drv["LastDUSoh"] = issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["TotalSOH"] = v.USOH;
                      //  + issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                }

                return value;
            }
            else
            {
                var t2 = (from n in t
                          select
                              new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  USOH = n.USOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = n.LossAdj,
                                  ProgramID = n.ProgramID,
                                  Status = n.Status,
                                  //Quantity = n.Max - n.SOH < 0 ? 0 : n.Max - n.SOH,
                                  Quantity = n.Quantity,
                                  DaysOutOfStock = (n.BeginingBalance == 0) ? GetDOSNoBegginingBalance(startDate, endDate, Convert.ToInt32(n.ID), storeId) + GetDaysOutOfStockBinCard(startDate, endDate, Convert.ToInt32(n.ID), storeId, n.BeginingBalance) : GetDaysOutOfStockBinCard(startDate, endDate, Convert.ToInt32(n.ID), storeId,n.BeginingBalance),
                                //  DaysOutOfStock = GetDaysOutOfStock(startDate, endDate, Convert.ToInt32(n.ID), storeId),
                                  //Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                  TypeID = n.TypeID
                              }).ToArray();

                var value = new DataTable();
                value.Columns.Add("ID", typeof(int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof(double));
                value.Columns.Add("SOH", typeof(double));
                value.Columns.Add("Max", typeof(double));
                value.Columns.Add("StockCodeDACA", typeof(string));
                value.Columns.Add("QtyPerPack", typeof(double));
                value.Columns.Add("Issued", typeof(double));
                value.Columns.Add("Received", typeof(double));
                value.Columns.Add("LossAdj", typeof(double));
                value.Columns.Add("Quantity", typeof(double));
                value.Columns.Add("DaysOutOfStock", typeof(int));
                value.Columns.Add("ProgramID", typeof(int));
                value.Columns.Add("Status", typeof(string));
                value.Columns.Add("TypeID", typeof(int));
                value.Columns.Add("LastDUSoh", typeof(decimal));
                value.Columns.Add("USOH", typeof(decimal));
                value.Columns.Add("TotalSOH", typeof(decimal));

                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["USOH"] = v.USOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                    drv["Quantity"] = (((120*v.Issued)/(60-v.DaysOutOfStock)) - v.USOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2) < 0) ? 0 : ((120 * v.Issued) / (60 - v.DaysOutOfStock)) - v.USOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                   // drv["Quantity"] = (v.Max - v.SOH- issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2) < 0) ? 0 : v.Max - v.SOH- issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["ProgramID"] = v.ProgramID;
                    drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    //drv["MaxStockQty"] = v.MaxStockQty;
                    drv["Status"] = v.Status;
                    drv["TypeID"] = v.TypeID;
                    drv["LastDUSoh"] = issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["TotalSOH"] = v.USOH;
                        //+ issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                }

                return value;
            }

        }

        public DataTable GetVRFReport(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            var ginfo = new GeneralInfo();
            ginfo.LoadAll();

            var balance = new Balance();
            var issue = new IssueDoc();
            var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
            var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
            if (fromMonth != 1)
                fromMonth--;
            else
            {
                fromYear--;
                fromMonth = 12;
            }
            var dtbl = balance.GetSOHForProgramRRF(storeId, fromMonth, fromYear);
            var dtbl2 = balance.GetSOHForProgramRRF(storeId, toMonth, toYear);

            var dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            var dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            var query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from" +
                                         " Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd " +
                                         "where [Date] between '{0}' and '{1}' and" + " StoreID = {2} group by ItemID) as" +
                                         " A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var received = this.DataTable;
            var isdt = new DateTime(fromYear, fromMonth , 01);
            if (fromMonth < 12)
               isdt = new DateTime(fromYear, fromMonth+1, 01);
            else if (fromMonth == 12)
                isdt = new DateTime(fromYear + 1, 01, 01);
            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity " +
                                  "from Items left join (select ItemID,sum(Quantity) Quantity " +
                                  "from IssueDoc " +
                                  "where [Date] between '{0}' and '{1}' and StoreID = {2} and IsTransfer = 0 " +
                                  "group by ItemID ) as A on Items.ID = A.ItemID "
                                  , isdt, dt2, storeId);
            this.LoadFromRawSql(query);
            var issued = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from " +
                                  "Items left join (select ItemID,sum(case when Losses = 1 then - Quantity else " +
                                  "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
                                  "and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID "
                                 , dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            var lost = this.DataTable;

            query = string.Format("select distinct Items.ID,Items.StockCodeDACA,Items.Cost, " +
                                  " case Items.Cost when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack " +
                                  " from Items where Pediatric=1");
            this.LoadFromRawSql(query);
            var preferredPackSizetbl = DataTable;
            
            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new
                     {
                         ID = y["ID"],
                         FullItemName = y["FullItemName"],
                         Unit = y["Unit"],
                         StockCode = y["StockCode"],
                         BeginingBalance = Convert.ToDouble(y["SOH"]),
                         ProgramID = y["ProgramID"],
                         SOH = Convert.ToDouble(z["SOH"]),
                         USOH = Convert.ToDouble(z["Dispatchable"]),
                         Max = Convert.ToInt32(z["Max"]),
                         QtyPerPack = Convert.ToDouble(p["QtyPerPack"]),
                         StockCodeDACA = p["StockCodeDACA"],
                         Status = y["Status"],
                         TypeID = y["TypeID"]
                     }).Distinct().ToArray();

            var m = (from n in x
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         USOH = n.USOH,
                         Max = n.Max,
                         QtyPerPack = n.QtyPerPack,
                         StockCodeDACA = n.StockCodeDACA,
                         ProgramID = n.ProgramID,
                         Received = z["Quantity"],
                         Status = n.Status,
                         TypeID = n.TypeID
                     }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             ID = n.ID,
                             FullItemName = n.FullItemName,
                             Unit = n.Unit,
                             StockCode = n.StockCode,
                             BeginingBalance = n.BeginingBalance,
                             SOH = n.SOH,
                             USOH = n.USOH,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             StockCodeDACA = n.StockCodeDACA,
                             QtyPerPack = n.QtyPerPack,
                             Received = n.Received,
                             ProgramID = n.ProgramID,
                             Status = n.Status,
                             Issued = Convert.ToInt32(z["Quantity"]),
                             TypeID = n.TypeID
                         }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         USOH = n.USOH,
                         Max = n.Max,
                         StockCodeDACA = n.StockCodeDACA,
                         QtyPerPack = n.QtyPerPack,
                         Received = n.Received,
                         ProgramID = n.ProgramID,
                         Issued = n.Issued,
                         Status = n.Status,
                         LossAdj = z["Quantity"],
                         Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                         TypeID = n.TypeID
                     }).ToArray();
            if (t.Length == 0)
            {
                var t2 = (from n in l
                          select
                              new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  USOH = n.USOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = 0,
                                  ProgramID = n.ProgramID,
                                  Status = n.Status,
                                  Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                                  //DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                  //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                  //TODO: This is a quick fix.  We need to take stock status from the last three months.
                                  // MaxStockQty =((120*n.Issued)/(60 -Convert.ToInt32(Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate,
                                  // endDate)))),
                                  TypeID = n.TypeID
                              }).ToArray();

                var value = new DataTable();
                value.Columns.Add("ID", typeof(int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof(double));
                value.Columns.Add("SOH", typeof(double));
                value.Columns.Add("Max", typeof(double));
                value.Columns.Add("StockCodeDACA", typeof(string));
                value.Columns.Add("QtyPerPack", typeof(double));
                value.Columns.Add("Issued", typeof(double));
                value.Columns.Add("Received", typeof(double));
                value.Columns.Add("LossAdj", typeof(double));
                value.Columns.Add("Quantity", typeof(double));
                value.Columns.Add("DaysOutOfStock", typeof(int));

                //Added for vaccine RF
                value.Columns.Add("Doses", typeof (int));
                value.Columns.Add("WasteFactor", typeof(decimal));
                value.Columns.Add("TargetCoverage", typeof(decimal));
                value.Columns.Add("VaccinationGiven", typeof(double));
                value.Columns.Add("RequirmentforNextSupply", typeof(decimal));
                value.Columns.Add("Remark", typeof(string));
                value.Columns.Add("QuantityOrdered", typeof(decimal));

                //value.Columns.Add("MaxStockQty", typeof (double));
                value.Columns.Add("ProgramID", typeof(int));
                value.Columns.Add("Status", typeof(string));
                value.Columns.Add("TypeID", typeof(int));
                value.Columns.Add("LastDUSoh", typeof(decimal));
                value.Columns.Add("USOH", typeof(decimal));
                value.Columns.Add("TotalSOH", typeof(decimal));

                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["USOH"] = v.USOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                    drv["Quantity"] = (v.Max - v.SOH- issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2) < 0) ? 0 : v.Max - v.SOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["ProgramID"] = v.ProgramID;
                   
                    drv["Doses"] = 1;
                    drv["WasteFactor"] = 1.33;
                    drv["TargetCoverage"] = 1.00;
                    drv["RequirmentforNextSupply"] = 200;
                    drv["VaccinationGiven"] = 1.0;

                    drv["QuantityOrdered"] = Convert.ToDouble(drv["RequirmentforNextSupply"]) - (Convert.ToDouble(drv["BeginingBalance"]) + Convert.ToDouble(drv["Received"]) - Convert.ToDouble(drv["Issued"]) + Convert.ToDouble(drv["LossAdj"])) < 0 ? 0 : Convert.ToDouble(drv["RequirmentforNextSupply"]) - (Convert.ToDouble(drv["BeginingBalance"]) + Convert.ToDouble(drv["Received"]) - Convert.ToDouble(drv["Issued"]) + Convert.ToDouble(drv["LossAdj"]));

                    drv["Remark"] = "";
                   // drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    //drv["MaxStockQty"] = v.MaxStockQty;
                    drv["Status"] = v.Status;
                    drv["TypeID"] = v.TypeID;
                    drv["LastDUSoh"] = issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["TotalSOH"] = v.USOH + issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                }

                return value;
            }
            else
            {
                var t2 = (from n in t
                          select
                              new
                              {
                                  ID = n.ID,
                                  FullItemName = n.FullItemName,
                                  Unit = n.Unit,
                                  StockCode = n.StockCode,
                                  BeginingBalance = n.BeginingBalance,
                                  SOH = n.SOH,
                                  USOH = n.USOH,
                                  Max = n.Max,
                                  StockCodeDACA = n.StockCodeDACA,
                                  QtyPerPack = n.QtyPerPack,
                                  Received = n.Received,
                                  Issued = n.Issued,
                                  LossAdj = n.LossAdj,
                                  ProgramID = n.ProgramID,
                                  Status = n.Status,
                                  Quantity = n.Max - n.SOH < 0 ? 0 : n.Max - n.SOH,
                                  DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),
                                  TypeID = n.TypeID
                              }).ToArray();

                var value = new DataTable();
                value.Columns.Add("ID", typeof(int));
                value.Columns.Add("FullItemName");
                value.Columns.Add("Unit");
                value.Columns.Add("StockCode");
                value.Columns.Add("BeginingBalance", typeof(double));
                value.Columns.Add("SOH", typeof(double));
                value.Columns.Add("Max", typeof(double));
                value.Columns.Add("StockCodeDACA", typeof(string));
                value.Columns.Add("QtyPerPack", typeof(double));
                value.Columns.Add("Issued", typeof(double));
                value.Columns.Add("Received", typeof(double));
                value.Columns.Add("LossAdj", typeof(double));
                value.Columns.Add("Quantity", typeof(double));
                value.Columns.Add("DaysOutOfStock", typeof(int));

                value.Columns.Add("Doses", typeof(int));
                value.Columns.Add("WasteFactor", typeof(decimal));
                value.Columns.Add("TargetCoverage", typeof(decimal));
                value.Columns.Add("RequirmentforNextSupply", typeof(decimal));
                value.Columns.Add("VaccinationGiven", typeof(double));
                value.Columns.Add("Remark", typeof(string));


                value.Columns.Add("QuantityOrdered", typeof(decimal));

                value.Columns.Add("ProgramID", typeof(int));
                value.Columns.Add("Status", typeof(string));
                value.Columns.Add("TypeID", typeof(int));
                value.Columns.Add("LastDUSoh", typeof(decimal));
                value.Columns.Add("USOH", typeof(decimal));
                value.Columns.Add("TotalSOH", typeof(decimal));

                foreach (var v in t2)
                {
                    DataRowView drv = value.DefaultView.AddNew();
                    drv["ID"] = v.ID;
                    drv["FullItemName"] = v.FullItemName;
                    drv["Unit"] = v.Unit;
                    drv["StockCode"] = v.StockCode;
                    drv["BeginingBalance"] = v.BeginingBalance;
                    drv["SOH"] = v.SOH;
                    drv["USOH"] = v.USOH;
                    drv["Max"] = v.Max;
                    drv["StockCodeDACA"] = v.StockCodeDACA;
                    drv["QtyPerPack"] = v.QtyPerPack;
                    drv["Issued"] = v.Issued;
                    drv["Received"] = v.Received;
                    drv["LossAdj"] = v.LossAdj;
                    drv["Quantity"] = (v.Max - v.SOH - issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2)  < 0) ? 0 : v.Max - v.SOH- issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["ProgramID"] = v.ProgramID;
                    drv["DaysOutOfStock"] = v.DaysOutOfStock;
                    //drv["MaxStockQty"] = v.MaxStockQty;
                    drv["Doses"] = 1;
                    drv["WasteFactor"] = 1.33;
                    drv["TargetCoverage"] = 1.00;
                    drv["RequirmentforNextSupply"] = 200;

                    drv["QuantityOrdered"] = Convert.ToDouble(drv["RequirmentforNextSupply"]) - (Convert.ToDouble(drv["BeginingBalance"]) + Convert.ToDouble(drv["Received"]) - Convert.ToDouble(drv["Issued"]) + Convert.ToDouble(drv["LossAdj"])) < 0 ? 0 : Convert.ToDouble(drv["RequirmentforNextSupply"]) - (Convert.ToDouble(drv["BeginingBalance"]) + Convert.ToDouble(drv["Received"]) - Convert.ToDouble(drv["Issued"]) + Convert.ToDouble(drv["LossAdj"]));
                   
                    drv["VaccinationGiven"] = 1.0;
                    drv["Remark"] = "";

                    drv["Status"] = v.Status;
                    drv["TypeID"] = v.TypeID;
                    drv["LastDUSoh"] = issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                    drv["TotalSOH"] = v.USOH + issue.GetDULastSOH1(Convert.ToInt32(v.ID), dt1, dt2);
                }

                return value;
            }

        }

        #region UnUsedFunctions
        //public DataTable GetRRFReportForOldSite(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        //{
        //    var balance = new Balance();
        //    var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
        //    var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
        //    if (fromMonth != 1)
        //        fromMonth--;
        //    else
        //    {
        //        fromYear--;
        //        fromMonth = 12; //Because SOH returns stock until the end of the month
        //    }
        //    var dtbl = balance.GetSOHForRRF(storeId, fromMonth, fromYear);
        //    var dtbl2 = balance.GetSOHForRRF(storeId, toMonth, toYear);

        //    var dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
        //    var dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

        //    var query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity from Items left join " +
        //                              "(select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd where [Date] between '" +
        //                              "{0}'and '{1}' and StoreID = '{2}' group by ItemID) as A on Items.DSItemID = A.ItemID", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    var received = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity " +
        //                          "from Items left join (select ItemID,sum(Quantity) Quantity " +
        //                          "from IssueDoc rd where [Date] between '{0}' and '{1}' and " +
        //                          "StoreID = {2} group by ItemID) as A on Items.DSItemID = A.ItemID ", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    var issued = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity from " +
        //                          "Items left join (select ItemID,sum(case when Losses = 1 then - Quantity else " +
        //                          "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
        //                          "and StoreID = {2} group by ItemID) as A on Items.DSItemID = A.ItemID ", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    var lost = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID,Items.StockCodeDACA,Items.Cost, case Items.Cost " +
        //                          "when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
        //    this.LoadFromRawSql(query);
        //    var preferredPackSizetbl = DataTable;

        //    var itm = new Items();
        //    var daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

           
        //    var x = (from y in dtbl.AsEnumerable()
        //             join z in dtbl2.AsEnumerable()
        //             on y["DSItemID"] equals z["DSItemID"]
        //             join p in preferredPackSizetbl.AsEnumerable()
        //             on y["DSItemID"] equals p["DSItemID"]
        //             where Convert.ToInt32(y["EverReceived"]) == 1
        //             select new
        //             {
        //                 DSItemID = y["DSItemID"],
        //                 FullItemName = y["FullItemName"],
        //                 Unit = y["Unit"],
        //                 StockCode = y["StockCode"],
        //                 BeginingBalance = Convert.ToDouble(y["SOH"]),
        //                 ProgramID = y["ProgramID"],
        //                 SOH = Convert.ToDouble(z["SOH"]),
        //                 Max = Convert.ToInt32(z["Max"]),
        //                 QtyPerPack = Convert.ToDouble(p["QtyPerPack"]),
        //                 StockCodeDACA = p["StockCodeDACA"],
        //                 Status = y["Status"],
        //                 TypeID = y["TypeID"],
        //                 EverReceived =y["EverReceived"]
        //             }).Distinct().ToArray();

        //    var m = (from n in x
        //             join z in received.AsEnumerable()
        //             on n.DSItemID equals z["DSItemID"]
        //             select new
        //             {
        //                 DSItemID = n.DSItemID,
        //                 FullItemName = n.FullItemName,
        //                 Unit = n.Unit,
        //                 StockCode = n.StockCode,
        //                 BeginingBalance = n.BeginingBalance,
        //                 SOH = n.SOH,
        //                 Max = n.Max,
        //                 QtyPerPack = n.QtyPerPack,
        //                 StockCodeDACA = n.StockCodeDACA,
        //                 ProgramID = n.ProgramID,
        //                 Received = z["Quantity"],
        //                 Status = n.Status,
        //                 TypeID=n.TypeID,
        //                 EverReceived =n.EverReceived
        //             }).ToArray();

        //    var l = (from n in m
        //             join z in issued.AsEnumerable()
        //                 on n.DSItemID equals z["DSItemID"]
        //             select
        //                 new
        //                 {
        //                     DSItemID = n.DSItemID,
        //                     FullItemName = n.FullItemName,
        //                     Unit = n.Unit,
        //                     StockCode = n.StockCode,
        //                     BeginingBalance = n.BeginingBalance,
        //                     SOH = n.SOH,
        //                     Max = Convert.ToInt32(z["Quantity"]) * 2,
        //                     StockCodeDACA = n.StockCodeDACA,
        //                     QtyPerPack = n.QtyPerPack,
        //                     Received = n.Received,
        //                     ProgramID = n.ProgramID,
        //                     Issued = Convert.ToInt32(z["Quantity"]),
        //                     Status = n.Status,
        //                     TypeID = n.TypeID,
        //                     EverReceived =n.EverReceived
                             

        //                 }).ToArray();

        //    var t = (from n in l
        //             join z in lost.AsEnumerable()
        //             on n.DSItemID equals z["DSItemID"]
        //             select new
        //             {
        //                 DSItemID = n.DSItemID,
        //                 FullItemName = n.FullItemName,
        //                 Unit = n.Unit,
        //                 StockCode = n.StockCode,
        //                 BeginingBalance = n.BeginingBalance,
        //                 SOH = n.SOH,
        //                 Max = n.Max,
        //                 StockCodeDACA = n.StockCodeDACA,
        //                 QtyPerPack = n.QtyPerPack,
        //                 Received = n.Received,
        //                 ProgramID = n.ProgramID,
        //                 Issued = n.Issued,
        //                 LossAdj = z["Quantity"],
        //                 Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
        //                 Status=n.Status,
        //                 TypeID = n.TypeID,
        //                 EverReceived =n.EverReceived
        //             }).ToArray();

        //    var t1 = (from n in t
        //              join z in daysOutOfStock.AsEnumerable()
        //                  on n.DSItemID equals z["DSItemID"]
        //              select
        //                  new
        //                  {
        //                      DSItemID = n.DSItemID,
        //                      FullItemName = n.FullItemName,
        //                      Unit = n.Unit,
        //                      StockCode = n.StockCode,
        //                      BeginingBalance = n.BeginingBalance,
        //                      SOH = n.SOH,
        //                      Max = n.Max,
        //                      StockCodeDACA = n.StockCodeDACA,
        //                      QtyPerPack = n.QtyPerPack,
        //                      Received = n.Received,
        //                      Issued = n.Issued,
        //                      LossAdj = n.LossAdj,
        //                      ProgramID = n.ProgramID,
        //                      Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
        //                      Status=n.Status,
        //                      TypeID=n.TypeID,
        //                      EverReceived =n.EverReceived,
        //                      DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.DSItemID), storeId, startDate, endDate)//Builder.CalculateStockoutDays(Convert.ToInt32(ID), storeId, startDate,endDate) DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
        //                  }).ToArray();

        //    var t2 = (from n in t1
        //              select
        //                  new
        //                  {
        //                      DSItemID = n.DSItemID,
        //                      FullItemName = n.FullItemName,
        //                      Unit = n.Unit,
        //                      StockCode = n.StockCode,
        //                      BeginingBalance = n.BeginingBalance,
        //                      SOH = n.SOH,
        //                      Max = n.Max,
        //                      StockCodeDACA = n.StockCodeDACA,
        //                      QtyPerPack = n.QtyPerPack,
        //                      Received = n.Received,
        //                      Issued = n.Issued,
        //                      LossAdj = n.LossAdj,
        //                      ProgramID = n.ProgramID,
        //                      Status =n.Status,
        //                      TypeID=n.TypeID,
        //                      EverReceived =n.EverReceived,
        //                      Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
        //                      DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.DSItemID), storeId, startDate, endDate),//TODO: This is a quick fix.  We need to take stock status from the last three months.
        //                      //TODO: This is a quick fix.  We need to take stock status from the last three months.
        //                      MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock))),
        //                  }).ToArray();

        //    //return t;
        //    // Converting shit into antoher shit.
        //    // Just because i was not able to read the elemntes of the anonymus type in another method
        //    var value = new DataTable();
        //    value.Columns.Add("DSItemID", typeof(int));
        //    value.Columns.Add("FullItemName");
        //    value.Columns.Add("Unit");
        //    value.Columns.Add("StockCode");
        //    value.Columns.Add("BeginingBalance", typeof(double));
        //    value.Columns.Add("SOH", typeof(double));
        //    value.Columns.Add("Max", typeof(double));
        //    value.Columns.Add("StockCodeDACA", typeof(string));
        //    value.Columns.Add("QtyPerPack", typeof(double));
        //    value.Columns.Add("Issued", typeof(double));
        //    value.Columns.Add("Received", typeof(double));
        //    value.Columns.Add("LossAdj", typeof(double));
        //    value.Columns.Add("Quantity", typeof(double));
        //    value.Columns.Add("DaysOutOfStock", typeof(int));
        //    value.Columns.Add("MaxStockQty", typeof(double));
        //    value.Columns.Add("ProgramID", typeof(int));
        //    value.Columns.Add("UnitID", typeof(int));
        //    value.Columns.Add("Status", typeof(string));
        //    value.Columns.Add("TypeID", typeof(int));
        //    value.Columns.Add("EverReceived", typeof(bool));
        //    foreach (var v in t2)
        //    {
        //        DataRowView drv = value.DefaultView.AddNew();
        //        drv["DSItemID"] = v.DSItemID;
        //        drv["FullItemName"] = v.FullItemName;
        //        drv["Unit"] = v.Unit;
        //        drv["StockCode"] = v.StockCode;
        //        drv["BeginingBalance"] = v.BeginingBalance;
        //        drv["SOH"] = v.SOH;
        //        drv["Max"] = v.Max;
        //        drv["StockCodeDACA"] = v.StockCodeDACA;
        //        drv["QtyPerPack"] = v.QtyPerPack;
        //        drv["Issued"] = v.Issued;
        //        drv["Received"] = v.Received;
        //        drv["LossAdj"] = v.LossAdj;
        //        drv["Quantity"] = v.Quantity;
        //        drv["ProgramID"] = v.ProgramID;
        //        drv["DaysOutOfStock"] = Builder.CalculateStockoutDays(Convert.ToInt32(drv["DSItemID"]), storeId, startDate, endDate);
        //        drv["MaxStockQty"] = v.MaxStockQty;
        //        drv["Status"] = v.Status;
        //        drv["TypeID"] = v.TypeID;
        //        drv["EverReceived"] = v.EverReceived;

        //    }

        //    return value;

        //}

        //public DataTable GetEmergencyRRFReportOldSite(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        //{
        //    var balance = new Balance();
        //    var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
        //    var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
        //    if (fromMonth != 1)
        //        fromMonth--;
        //    else
        //    {
        //        fromYear--;
        //        fromMonth = 12;//Because SOH returns stock until the end of the month
        //    }
        //    DataTable dtbl = balance.GetSOHForRRF(storeId, fromMonth, fromYear);
        //    DataTable dtbl2 = balance.GetSOHForRRF(storeId, toMonth, toYear);

        //    DateTime dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
        //    DateTime dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

        //    string query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity from" +
        //                                 " Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd " +
        //                                 "where [Date] between '{0}' and '{1}' and" + " StoreID = {2} group by ItemID) as" +
        //                                 " A on Items.DSItemID = A.ItemID", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    DataTable received = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity " +
        //                          "from Items left join (select ItemID, sum(Quantity) Quantity " +
        //                          "from IssueDoc rd where [Date] between '{0}' and '{1}' and " +
        //                          "StoreID = {2} group by ItemID) as A on Items.DSItemID = A.ItemID", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    DataTable issued = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID, isnull(Quantity,0) as Quantity from " +
        //                          "Items left join (select ItemID, sum(case when Losses = 1 then - Quantity else " +
        //                          "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
        //                          "and StoreID = {2} group by ItemID) as A on Items.DSItemID = A.ItemID", dt1, dt2, storeId);
        //    this.LoadFromRawSql(query);
        //    DataTable lost = this.DataTable;

        //    query = string.Format("select distinct Items.DSItemID,Items.StockCodeDACA,Items.Cost, case Items.Cost " +
        //                          "when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
        //    this.LoadFromRawSql(query);
        //    DataTable preferredPackSizetbl = DataTable;

        //    BLL.Items itm = new Items();
        //    System.Data.DataTable daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate1();

        //    //query=string.Format("select ")
        //    var theFilter = "Below EOP";

        //    var x = (from y in dtbl.AsEnumerable()
        //             join z in dtbl2.AsEnumerable()
        //             on y["DSItemID"] equals z["DSItemID"]
        //             join p in preferredPackSizetbl.AsEnumerable()
        //             on y["DSItemID"] equals p["DSItemID"]
        //             where Convert.ToInt32(y["EverReceived"]) == 1
        //             select new
        //             {
        //                 DSItemID = y["DSItemID"],
        //                 FullItemName = y["FullItemName"],
        //                 Unit = y["Unit"],
        //                 StockCode = y["StockCode"],
        //                 BeginingBalance = Convert.ToInt32(y["SOH"]),
        //                 SOH = Convert.ToInt32(z["SOH"]),
        //                 Max = Convert.ToInt32(z["Max"]),
        //                 QtyPerPack = Convert.ToInt32(p["QtyPerPack"]),
        //                 StockCodeDACA = p["StockCodeDACA"],
        //                 Status = z["Status"].ToString(),
        //                 TypeID =y["TypeID"]
        //             }).Distinct().ToArray();

        //    var u = (from z in x where theFilter.Contains(z.Status) select z).Distinct().ToArray();

        //    var m = (from n in u
        //             join z in received.AsEnumerable()
        //             on n.DSItemID equals z["DSItemID"]
        //             select new
        //             {
        //                 DSItemID = n.DSItemID,
        //                 FullItemName = n.FullItemName,
        //                 Unit = n.Unit,
        //                 StockCode = n.StockCode,
        //                 BeginingBalance = n.BeginingBalance,
        //                 SOH = n.SOH,
        //                 Max = n.Max,
        //                 QtyPerPack = n.QtyPerPack,
        //                 StockCodeDACA = n.StockCodeDACA,
        //                 Received = z["Quantity"],
        //                 TypeID=n.TypeID
        //             }).ToArray();

        //    var l = (from n in m
        //             join z in issued.AsEnumerable()
        //                 on n.DSItemID equals z["DSItemID"]
        //             select
        //                 new
        //                 {
        //                     DSItemID = n.DSItemID,
        //                     FullItemName = n.FullItemName,
        //                     Unit = n.Unit,
        //                     StockCode = n.StockCode,
        //                     BeginingBalance = n.BeginingBalance,
        //                     SOH = n.SOH,
        //                     Max = Convert.ToInt32(z["Quantity"]) * 2,
        //                     StockCodeDACA = n.StockCodeDACA,
        //                     QtyPerPack = n.QtyPerPack,
        //                     Received = n.Received,
        //                     Issued = Convert.ToInt32(z["Quantity"]),
        //                     TypeID=n.TypeID
        //                 }).ToArray();

        //    var t = (from n in l
        //             join z in lost.AsEnumerable()
        //             on n.DSItemID equals z["DSItemID"]
        //             select new
        //             {
        //                 DSItemID = n.DSItemID,
        //                 FullItemName = n.FullItemName,
        //                 Unit = n.Unit,
        //                 StockCode = n.StockCode,
        //                 BeginingBalance = n.BeginingBalance,
        //                 SOH = n.SOH,
        //                 Max = n.Max,
        //                 StockCodeDACA = n.StockCodeDACA,
        //                 QtyPerPack = n.QtyPerPack,
        //                 Received = n.Received,
        //                 Issued = n.Issued,
        //                        TypeID=n.TypeID,
        //                 LossAdj = z["Quantity"],
        //                 Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH
        //             }).ToArray();

        //    var t1 = (from n in t
        //              join z in daysOutOfStock.AsEnumerable()
        //                  on n.DSItemID equals z["DSItemID"]
        //              select
        //                  new
        //                  {
        //                      DSItemID = n.DSItemID,
        //                      FullItemName = n.FullItemName,
        //                      Unit = n.Unit,
        //                      StockCode = n.StockCode,
        //                      BeginingBalance = n.BeginingBalance,
        //                      SOH = n.SOH,
        //                      Max = n.Max,
        //                      StockCodeDACA = n.StockCodeDACA,
        //                      QtyPerPack = n.QtyPerPack,
        //                      Received = n.Received,
        //                      Issued = n.Issued,
        //                      LossAdj = n.LossAdj,
        //                       TypeID=n.TypeID,
        //                      Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
        //                      DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.DSItemID), storeId, startDate, endDate)//Builder.CalculateStockoutDays(Convert.ToInt32(ID), storeId, startDate,endDate) DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
        //                  }).ToArray();

        //    var t2 = (from n in t1
        //              select
        //                  new
        //                  {
        //                      DSItemID = n.DSItemID,
        //                      FullItemName = n.FullItemName,
        //                      Unit = n.Unit,
        //                      StockCode = n.StockCode,
        //                      BeginingBalance = n.BeginingBalance,
        //                      SOH = n.SOH,
        //                      Max = n.Max,
        //                      StockCodeDACA = n.StockCodeDACA,
        //                      QtyPerPack = n.QtyPerPack,
        //                      Received = n.Received,
        //                      Issued = n.Issued,
        //                      LossAdj = n.LossAdj,
        //                             TypeID=n.TypeID,
        //                      Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
        //                      DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.DSItemID), storeId, startDate, endDate),//TODO: This is a quick fix.  We need to take stock status from the last three months.
        //                      //TODO: This is a quick fix.  We need to take stock status from the last three months.
        //                      MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock)))
        //                  }).ToArray();

        //    //return t;
        //    // Converting shit into antoher shit.
        //    // Just because i was not able to read the elemntes of the anonymus type in another method
        //    DataTable value = new DataTable();
        //    value.Columns.Add("DSItemID", typeof(int));
        //    value.Columns.Add("FullItemName");
        //    value.Columns.Add("Unit");
        //    value.Columns.Add("StockCode");
        //    value.Columns.Add("BeginingBalance", typeof(int));
        //    value.Columns.Add("SOH", typeof(int));
        //    value.Columns.Add("Max", typeof(int));
        //    value.Columns.Add("StockCodeDACA", typeof(string));
        //    value.Columns.Add("QtyPerPack", typeof(int));
        //    value.Columns.Add("Issued", typeof(int));
        //    value.Columns.Add("Received", typeof(int));
        //    value.Columns.Add("LossAdj", typeof(int));
        //    value.Columns.Add("Quantity", typeof(int));
        //    value.Columns.Add("DaysOutOfStock", typeof(int));
        //    value.Columns.Add("MaxStockQty", typeof(int));
        //    value.Columns.Add("ProgramID", typeof(int));
        //    value.Columns.Add("TypeID", typeof(int));
        //    foreach (var v in t2)
        //    {
        //        DataRowView drv = value.DefaultView.AddNew();
        //        drv["DSItemID"] = v.DSItemID;
        //        drv["FullItemName"] = v.FullItemName;
        //        drv["Unit"] = v.Unit;
        //        drv["StockCode"] = v.StockCode;
        //        drv["BeginingBalance"] = v.BeginingBalance;
        //        drv["SOH"] = v.SOH;
        //        drv["Max"] = v.Max;
        //        drv["StockCodeDACA"] = v.StockCodeDACA;
        //        drv["QtyPerPack"] = v.QtyPerPack;
        //        drv["Issued"] = v.Issued;
        //        drv["Received"] = v.Received;
        //        drv["LossAdj"] = v.LossAdj;
        //        drv["Quantity"] = v.Quantity;
        //        drv["DaysOutOfStock"] = Builder.CalculateStockoutDays(Convert.ToInt32(drv["ID"]), storeId, startDate, endDate);
        //        drv["MaxStockQty"] = v.MaxStockQty;
        //        drv["TypeID"] = v.TypeID;
        //    }

        //    return value;

        //}

        public DataTable GetEmergencyRRFReport(int storeId, int fromYear, int fromMonth, int toYear, int toMonth)
        {
            Balance balance = new Balance();
            var startDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 1, fromMonth, fromYear));
            var endDate = EthiopianDate.EthiopianDate.EthiopianToGregorian(String.Format("{0}/{1}/{2}", 30, toMonth, toYear));
            if (fromMonth != 1)
                fromMonth--;
            else
            {
                fromYear--;
                fromMonth = 12;//Because SOH returns stock until the end of the month
            }
            DataTable dtbl = balance.GetSOHForProgramRRF(storeId, fromMonth, fromYear);
            DataTable dtbl2 = balance.GetSOHForProgramRRF(storeId, toMonth, toYear);

            DateTime dt1 = new DateTime(fromYear, fromMonth, DateTime.DaysInMonth(fromYear, fromMonth));
            DateTime dt2 = new DateTime(toYear, toMonth, DateTime.DaysInMonth(toYear, toMonth));

            string query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from" +
                                         " Items left join (select ItemID, sum(Quantity) as Quantity from ReceiveDoc rd " +
                                         "where [Date] between '{0}' and '{1}' and" + " StoreID = {2} group by ItemID) as" +
                                         " A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable received = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity " +
                                  "from Items left join (select ItemID, sum(Quantity) Quantity " +
                                  "from IssueDoc rd where [Date] between '{0}' and '{1}' and " +
                                  "StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable issued = this.DataTable;

            query = string.Format("select distinct Items.ID, isnull(Quantity,0) as Quantity from " +
                                  "Items left join (select ItemID, sum(case when Losses = 1 then - Quantity else " +
                                  "Quantity end) Quantity from Disposal where [Date] between '{0}' and '{1}' " +
                                  "and StoreID = {2} group by ItemID) as A on Items.ID = A.ItemID", dt1, dt2, storeId);
            this.LoadFromRawSql(query);
            DataTable lost = this.DataTable;

            query = string.Format("select distinct Items.ID,Items.StockCodeDACA,Items.Cost, case Items.Cost " +
                                  "when 0 then 1 else isnull(Items.Cost,1) end as QtyPerPack from Items");
            this.LoadFromRawSql(query);
            DataTable preferredPackSizetbl = DataTable;

            BLL.Items itm = new Items();
            System.Data.DataTable daysOutOfStock = this.GetItemsWithLastIssuedOrDisposedDate();

            //query=string.Format("select ")
            var theFilter = "Below EOP";

            var x = (from y in dtbl.AsEnumerable()
                     join z in dtbl2.AsEnumerable()
                     on y["ID"] equals z["ID"]
                     join p in preferredPackSizetbl.AsEnumerable()
                     on y["ID"] equals p["ID"]
                     where Convert.ToInt32(y["EverReceived"]) == 1
                     select new
                     {
                         ID = y["ID"],
                         FullItemName = y["FullItemName"],
                         Unit = y["Unit"],
                         StockCode = y["StockCode"],
                         BeginingBalance = Convert.ToInt32(y["SOH"]),
                         SOH = Convert.ToInt32(z["SOH"]),
                         Max = Convert.ToInt32(z["Max"]),
                         QtyPerPack = Convert.ToInt32(p["QtyPerPack"]),
                         StockCodeDACA = p["StockCodeDACA"],
                         Status = z["Status"].ToString()
                     }).Distinct().ToArray();

            var u = (from z in x where theFilter.Contains(z.Status) select z).Distinct().ToArray();

            var m = (from n in u
                     join z in received.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         Max = n.Max,
                         QtyPerPack = n.QtyPerPack,
                         StockCodeDACA = n.StockCodeDACA,
                         Received = z["Quantity"]
                     }).ToArray();

            var l = (from n in m
                     join z in issued.AsEnumerable()
                         on n.ID equals z["ID"]
                     select
                         new
                         {
                             ID = n.ID,
                             FullItemName = n.FullItemName,
                             Unit = n.Unit,
                             StockCode = n.StockCode,
                             BeginingBalance = n.BeginingBalance,
                             SOH = n.SOH,
                             Max = Convert.ToInt32(z["Quantity"]) * 2,
                             StockCodeDACA = n.StockCodeDACA,
                             QtyPerPack = n.QtyPerPack,
                             Received = n.Received,
                             Issued = Convert.ToInt32(z["Quantity"]),

                         }).ToArray();

            var t = (from n in l
                     join z in lost.AsEnumerable()
                     on n.ID equals z["ID"]
                     select new
                     {
                         ID = n.ID,
                         FullItemName = n.FullItemName,
                         Unit = n.Unit,
                         StockCode = n.StockCode,
                         BeginingBalance = n.BeginingBalance,
                         SOH = n.SOH,
                         Max = n.Max,
                         StockCodeDACA = n.StockCodeDACA,
                         QtyPerPack = n.QtyPerPack,
                         Received = n.Received,
                         Issued = n.Issued,
                         LossAdj = z["Quantity"],
                         Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH
                     }).ToArray();

            var t1 = (from n in t
                      join z in daysOutOfStock.AsEnumerable()
                          on n.ID equals z["ID"]
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance,
                              SOH = n.SOH,
                              Max = n.Max,
                              StockCodeDACA = n.StockCodeDACA,
                              QtyPerPack = n.QtyPerPack,
                              Received = n.Received,
                              Issued = n.Issued,
                              LossAdj = n.LossAdj,

                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                              DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate)//Builder.CalculateStockoutDays(Convert.ToInt32(ID), storeId, startDate,endDate) DBNull.Value ? 0 : (Convert.ToInt32(z["DaysOutOfStock"]) < 60 ? z["DaysOutOfStock"] : 0)
                          }).ToArray();

            var t2 = (from n in t1
                      select
                          new
                          {
                              ID = n.ID,
                              FullItemName = n.FullItemName,
                              Unit = n.Unit,
                              StockCode = n.StockCode,
                              BeginingBalance = n.BeginingBalance,
                              SOH = n.SOH,
                              Max = n.Max,
                              StockCodeDACA = n.StockCodeDACA,
                              QtyPerPack = n.QtyPerPack,
                              Received = n.Received,
                              Issued = n.Issued,
                              LossAdj = n.LossAdj,

                              Quantity = (n.Max - n.SOH < 0) ? 0 : n.Max - n.SOH,
                              DaysOutOfStock = Builder.CalculateStockoutDays(Convert.ToInt32(n.ID), storeId, startDate, endDate),//TODO: This is a quick fix.  We need to take stock status from the last three months.
                              //TODO: This is a quick fix.  We need to take stock status from the last three months.
                              MaxStockQty = ((120 * n.Issued) / (60 - Convert.ToInt32(n.DaysOutOfStock)))
                          }).ToArray();

            //return t;
            // Converting shit into antoher shit.
            // Just because i was not able to read the elemntes of the anonymus type in another method
            DataTable value = new DataTable();
            value.Columns.Add("ID", typeof(int));
            value.Columns.Add("FullItemName");
            value.Columns.Add("Unit");
            value.Columns.Add("StockCode");
            value.Columns.Add("BeginingBalance", typeof(int));
            value.Columns.Add("SOH", typeof(int));
            value.Columns.Add("Max", typeof(int));
            value.Columns.Add("StockCodeDACA", typeof(string));
            value.Columns.Add("QtyPerPack", typeof(int));
            value.Columns.Add("Issued", typeof(int));
            value.Columns.Add("Received", typeof(int));
            value.Columns.Add("LossAdj", typeof(int));
            value.Columns.Add("Quantity", typeof(int));
            value.Columns.Add("DaysOutOfStock", typeof(int));
            value.Columns.Add("MaxStockQty", typeof(int));
            value.Columns.Add("ProgramID", typeof(int));
            foreach (var v in t2)
            {
                DataRowView drv = value.DefaultView.AddNew();
                drv["ID"] = v.ID;
                drv["FullItemName"] = v.FullItemName;
                drv["Unit"] = v.Unit;
                drv["StockCode"] = v.StockCode;
                drv["BeginingBalance"] = v.BeginingBalance;
                drv["SOH"] = v.SOH;
                drv["Max"] = v.Max;
                drv["StockCodeDACA"] = v.StockCodeDACA;
                drv["QtyPerPack"] = v.QtyPerPack;
                drv["Issued"] = v.Issued;
                drv["Received"] = v.Received;
                drv["LossAdj"] = v.LossAdj;
                drv["Quantity"] = v.Quantity;
                drv["DaysOutOfStock"] = Builder.CalculateStockoutDays(Convert.ToInt32(drv["ID"]), storeId, startDate, endDate);
                drv["MaxStockQty"] = v.MaxStockQty;

            }

            return value;

        }

        #endregion 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="fromYear">In Ethiopian Calendar</param>
        /// <param name="fromMonth">In Ethiopian Calendar</param>
        /// <param name="toYear">In Ethiopian Calendar</param>
        /// <param name="toMonth">In Ethiopian Calendar</param>
        /// <returns></returns>
        
        
        //TOREMOVE: A hack because the id field is not auto increment.
        public void AddNextItem()
        {
            this.LoadFromRawSql("select max(ID) ID from Items");
            int id = this.ID;
            this.FlushData();

            this.AddNew();
            this.ID = ++id;
        }

        public int GetNextItemID()
        {
            this.LoadFromRawSql("select Max(ID) as MaxTop from Items");
            return Convert.ToInt32(this.GetColumn("MaxTop")) + 1;
        }

        public static void MergeItems(int itemToBeMergedIntoAnother, int itemUsedForMerging)
        {
            String[] tableNames ={"Disposal","IssueDoc","ReceiveDoc","YearEnd","ItemManufacturer","Items","ItemSupplier",
                                    "ItemSupplyCategory","RRFDetail","OrderDetail","PickListDetail","ProductsCategory",
                                    "ProgramProduct","DUsItemList","Exchange","InternalTransfer","Losses"};
            for (int i = 0; i < tableNames.Length; i++)
            {
                BLL.Items itm = new Items();
                string query = string.Format("Update {0} SET ItemID = {1} Where ItemID={2}", tableNames[i], itemUsedForMerging, itemToBeMergedIntoAnother);
                itm.LoadFromRawSql(query);
            }
        }
        public int GetVENbyValue(string value)
        {
            var query = string.Format(@"SELECT ID FROM VEN WHERE Value = '{0}'", value);
            this.LoadFromRawSql(query);
            return Convert.ToInt32(this.GetColumn("ID"));
        }
    }
}
