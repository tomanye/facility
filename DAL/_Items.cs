/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Items : SqlClientEntity
    {
        public _Items()
        {
            this.QuerySource = "Items";
            this.MappingName = "Items";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemsLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_ItemsLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter StockCode
            {
                get
                {
                    return new SqlParameter("@StockCode", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Strength
            {
                get
                {
                    return new SqlParameter("@Strength", SqlDbType.VarChar, 1500);
                }
            }

            public static SqlParameter DosageFormID
            {
                get
                {
                    return new SqlParameter("@DosageFormID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter UnitID
            {
                get
                {
                    return new SqlParameter("@UnitID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter VEN
            {
                get
                {
                    return new SqlParameter("@VEN", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ABC
            {
                get
                {
                    return new SqlParameter("@ABC", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsFree
            {
                get
                {
                    return new SqlParameter("@IsFree", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IsDiscontinued
            {
                get
                {
                    return new SqlParameter("@IsDiscontinued", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Cost
            {
                get
                {
                    return new SqlParameter("@Cost", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter EDL
            {
                get
                {
                    return new SqlParameter("@EDL", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Refrigeratored
            {
                get
                {
                    return new SqlParameter("@Refrigeratored", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Pediatric
            {
                get
                {
                    return new SqlParameter("@Pediatric", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter IINID
            {
                get
                {
                    return new SqlParameter("@IINID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsInHospitalList
            {
                get
                {
                    return new SqlParameter("@IsInHospitalList", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter NeedExpiryBatch
            {
                get
                {
                    return new SqlParameter("@NeedExpiryBatch", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Code
            {
                get
                {
                    return new SqlParameter("@Code", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter StockCodeDACA
            {
                get
                {
                    return new SqlParameter("@StockCodeDACA", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter NearExpiryTrigger
            {
                get
                {
                    return new SqlParameter("@NearExpiryTrigger", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter StorageTypeID
            {
                get
                {
                    return new SqlParameter("@StorageTypeID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter DSItemID
            {
                get
                {
                    return new SqlParameter("@DSItemID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IsPFSAVital
            {
                get
                {
                    return new SqlParameter("@IsPFSAVital", SqlDbType.Bit, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string StockCode = "StockCode";
            public const string Strength = "Strength";
            public const string DosageFormID = "DosageFormID";
            public const string UnitID = "UnitID";
            public const string VEN = "VEN";
            public const string ABC = "ABC";
            public const string IsFree = "IsFree";
            public const string IsDiscontinued = "IsDiscontinued";
            public const string Cost = "Cost";
            public const string EDL = "EDL";
            public const string Refrigeratored = "Refrigeratored";
            public const string Pediatric = "Pediatric";
            public const string IINID = "IINID";
            public const string IsInHospitalList = "IsInHospitalList";
            public const string NeedExpiryBatch = "NeedExpiryBatch";
            public const string Code = "Code";
            public const string StockCodeDACA = "StockCodeDACA";
            public const string NearExpiryTrigger = "NearExpiryTrigger";
            public const string StorageTypeID = "StorageTypeID";
            public const string DSItemID = "DSItemID";
            public const string IsPFSAVital = "isPFSAVital";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Items.PropertyNames.ID;
                    ht[StockCode] = _Items.PropertyNames.StockCode;
                    ht[Strength] = _Items.PropertyNames.Strength;
                    ht[DosageFormID] = _Items.PropertyNames.DosageFormID;
                    ht[UnitID] = _Items.PropertyNames.UnitID;
                    ht[VEN] = _Items.PropertyNames.VEN;
                    ht[ABC] = _Items.PropertyNames.ABC;
                    ht[IsFree] = _Items.PropertyNames.IsFree;
                    ht[IsDiscontinued] = _Items.PropertyNames.IsDiscontinued;
                    ht[Cost] = _Items.PropertyNames.Cost;
                    ht[EDL] = _Items.PropertyNames.EDL;
                    ht[Refrigeratored] = _Items.PropertyNames.Refrigeratored;
                    ht[Pediatric] = _Items.PropertyNames.Pediatric;
                    ht[IINID] = _Items.PropertyNames.IINID;
                    ht[IsInHospitalList] = _Items.PropertyNames.IsInHospitalList;
                    ht[NeedExpiryBatch] = _Items.PropertyNames.NeedExpiryBatch;
                    ht[Code] = _Items.PropertyNames.Code;
                    ht[StockCodeDACA] = _Items.PropertyNames.StockCodeDACA;
                    ht[NearExpiryTrigger] = _Items.PropertyNames.NearExpiryTrigger;
                    ht[StorageTypeID] = _Items.PropertyNames.StorageTypeID;
                    ht[DSItemID] = _Items.PropertyNames.DSItemID;
                    ht[IsPFSAVital] = _Items.PropertyNames.IsPFSAVital;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string StockCode = "StockCode";
            public const string Strength = "Strength";
            public const string DosageFormID = "DosageFormID";
            public const string UnitID = "UnitID";
            public const string VEN = "VEN";
            public const string ABC = "ABC";
            public const string IsFree = "IsFree";
            public const string IsDiscontinued = "IsDiscontinued";
            public const string Cost = "Cost";
            public const string EDL = "EDL";
            public const string Refrigeratored = "Refrigeratored";
            public const string Pediatric = "Pediatric";
            public const string IINID = "IINID";
            public const string IsInHospitalList = "IsInHospitalList";
            public const string NeedExpiryBatch = "NeedExpiryBatch";
            public const string Code = "Code";
            public const string StockCodeDACA = "StockCodeDACA";
            public const string NearExpiryTrigger = "NearExpiryTrigger";
            public const string StorageTypeID = "StorageTypeID";
            public const string DSItemID = "DSItemID";
            public const string IsPFSAVital = "IsPFSAVital";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Items.ColumnNames.ID;
                    ht[StockCode] = _Items.ColumnNames.StockCode;
                    ht[Strength] = _Items.ColumnNames.Strength;
                    ht[DosageFormID] = _Items.ColumnNames.DosageFormID;
                    ht[UnitID] = _Items.ColumnNames.UnitID;
                    ht[VEN] = _Items.ColumnNames.VEN;
                    ht[ABC] = _Items.ColumnNames.ABC;
                    ht[IsFree] = _Items.ColumnNames.IsFree;
                    ht[IsDiscontinued] = _Items.ColumnNames.IsDiscontinued;
                    ht[Cost] = _Items.ColumnNames.Cost;
                    ht[EDL] = _Items.ColumnNames.EDL;
                    ht[Refrigeratored] = _Items.ColumnNames.Refrigeratored;
                    ht[Pediatric] = _Items.ColumnNames.Pediatric;
                    ht[IINID] = _Items.ColumnNames.IINID;
                    ht[IsInHospitalList] = _Items.ColumnNames.IsInHospitalList;
                    ht[NeedExpiryBatch] = _Items.ColumnNames.NeedExpiryBatch;
                    ht[Code] = _Items.ColumnNames.Code;
                    ht[StockCodeDACA] = _Items.ColumnNames.StockCodeDACA;
                    ht[NearExpiryTrigger] = _Items.ColumnNames.NearExpiryTrigger;
                    ht[StorageTypeID] = _Items.ColumnNames.StorageTypeID;
                    ht[DSItemID] = _Items.ColumnNames.DSItemID;
                    ht[IsPFSAVital] = _Items.ColumnNames.IsPFSAVital;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string StockCode = "s_StockCode";
            public const string Strength = "s_Strength";
            public const string DosageFormID = "s_DosageFormID";
            public const string UnitID = "s_UnitID";
            public const string VEN = "s_VEN";
            public const string ABC = "s_ABC";
            public const string IsFree = "s_IsFree";
            public const string IsDiscontinued = "s_IsDiscontinued";
            public const string Cost = "s_Cost";
            public const string EDL = "s_EDL";
            public const string Refrigeratored = "s_Refrigeratored";
            public const string Pediatric = "s_Pediatric";
            public const string IINID = "s_IINID";
            public const string IsInHospitalList = "s_IsInHospitalList";
            public const string NeedExpiryBatch = "s_NeedExpiryBatch";
            public const string Code = "s_Code";
            public const string StockCodeDACA = "s_StockCodeDACA";
            public const string NearExpiryTrigger = "s_NearExpiryTrigger";
            public const string StorageTypeID = "s_StorageTypeID";
            public const string DSItemID = "s_DSItemID";
            public const string IsPFSAVital = "s_IsPFSAVital";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual string StockCode
        {
            get
            {
                return base.Getstring(ColumnNames.StockCode);
            }
            set
            {
                base.Setstring(ColumnNames.StockCode, value);
            }
        }

        public virtual string Strength
        {
            get
            {
                return base.Getstring(ColumnNames.Strength);
            }
            set
            {
                base.Setstring(ColumnNames.Strength, value);
            }
        }

        public virtual int DosageFormID
        {
            get
            {
                return base.Getint(ColumnNames.DosageFormID);
            }
            set
            {
                base.Setint(ColumnNames.DosageFormID, value);
            }
        }

        public virtual int UnitID
        {
            get
            {
                return base.Getint(ColumnNames.UnitID);
            }
            set
            {
                base.Setint(ColumnNames.UnitID, value);
            }
        }

        public virtual int VEN
        {
            get
            {
                return base.Getint(ColumnNames.VEN);
            }
            set
            {
                base.Setint(ColumnNames.VEN, value);
            }
        }

        public virtual int ABC
        {
            get
            {
                return base.Getint(ColumnNames.ABC);
            }
            set
            {
                base.Setint(ColumnNames.ABC, value);
            }
        }

        public virtual bool IsFree
        {
            get
            {
                return base.Getbool(ColumnNames.IsFree);
            }
            set
            {
                base.Setbool(ColumnNames.IsFree, value);
            }
        }

        public virtual bool IsDiscontinued
        {
            get
            {
                return base.Getbool(ColumnNames.IsDiscontinued);
            }
            set
            {
                base.Setbool(ColumnNames.IsDiscontinued, value);
            }
        }

        public virtual string Cost
        {
            get
            {
                return base.Getstring(ColumnNames.Cost);
            }
            set
            {
                base.Setstring(ColumnNames.Cost, value);
            }
        }

        public virtual bool EDL
        {
            get
            {
                return base.Getbool(ColumnNames.EDL);
            }
            set
            {
                base.Setbool(ColumnNames.EDL, value);
            }
        }

        public virtual bool Refrigeratored
        {
            get
            {
                return base.Getbool(ColumnNames.Refrigeratored);
            }
            set
            {
                base.Setbool(ColumnNames.Refrigeratored, value);
            }
        }

        public virtual bool Pediatric
        {
            get
            {
                return base.Getbool(ColumnNames.Pediatric);
            }
            set
            {
                base.Setbool(ColumnNames.Pediatric, value);
            }
        }

        public virtual int IINID
        {
            get
            {
                return base.Getint(ColumnNames.IINID);
            }
            set
            {
                base.Setint(ColumnNames.IINID, value);
            }
        }

        public virtual bool IsInHospitalList
        {
            get
            {
                return base.Getbool(ColumnNames.IsInHospitalList);
            }
            set
            {
                base.Setbool(ColumnNames.IsInHospitalList, value);
            }
        }

        public virtual bool NeedExpiryBatch
        {
            get
            {
                return base.Getbool(ColumnNames.NeedExpiryBatch);
            }
            set
            {
                base.Setbool(ColumnNames.NeedExpiryBatch, value);
            }
        }

        public virtual string Code
        {
            get
            {
                return base.Getstring(ColumnNames.Code);
            }
            set
            {
                base.Setstring(ColumnNames.Code, value);
            }
        }

        public virtual string StockCodeDACA
        {
            get
            {
                return base.Getstring(ColumnNames.StockCodeDACA);
            }
            set
            {
                base.Setstring(ColumnNames.StockCodeDACA, value);
            }
        }

        public virtual double NearExpiryTrigger
        {
            get
            {
                return base.Getdouble(ColumnNames.NearExpiryTrigger);
            }
            set
            {
                base.Setdouble(ColumnNames.NearExpiryTrigger, value);
            }
        }

        public virtual int StorageTypeID
        {
            get
            {
                return base.Getint(ColumnNames.StorageTypeID);
            }
            set
            {
                base.Setint(ColumnNames.StorageTypeID, value);
            }
        }

        public virtual int DSItemID
        {
            get
            {
                return base.Getint(ColumnNames.DSItemID);
            }
            set
            {
                base.Setint(ColumnNames.DSItemID, value);
            }
        }

        public virtual bool IsPFSAVital
        {
            get
            {
                return base.Getbool(ColumnNames.IsPFSAVital);
            }
            set
            {
                base.Setbool(ColumnNames.IsPFSAVital, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_StockCode
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StockCode) ? string.Empty : base.GetstringAsString(ColumnNames.StockCode);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StockCode);
                else
                    this.StockCode = base.SetstringAsString(ColumnNames.StockCode, value);
            }
        }

        public virtual string s_Strength
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Strength) ? string.Empty : base.GetstringAsString(ColumnNames.Strength);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Strength);
                else
                    this.Strength = base.SetstringAsString(ColumnNames.Strength, value);
            }
        }

        public virtual string s_DosageFormID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DosageFormID) ? string.Empty : base.GetintAsString(ColumnNames.DosageFormID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DosageFormID);
                else
                    this.DosageFormID = base.SetintAsString(ColumnNames.DosageFormID, value);
            }
        }

        public virtual string s_UnitID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UnitID) ? string.Empty : base.GetintAsString(ColumnNames.UnitID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UnitID);
                else
                    this.UnitID = base.SetintAsString(ColumnNames.UnitID, value);
            }
        }

        public virtual string s_VEN
        {
            get
            {
                return this.IsColumnNull(ColumnNames.VEN) ? string.Empty : base.GetintAsString(ColumnNames.VEN);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.VEN);
                else
                    this.VEN = base.SetintAsString(ColumnNames.VEN, value);
            }
        }

        public virtual string s_ABC
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ABC) ? string.Empty : base.GetintAsString(ColumnNames.ABC);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ABC);
                else
                    this.ABC = base.SetintAsString(ColumnNames.ABC, value);
            }
        }

        public virtual string s_IsFree
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsFree) ? string.Empty : base.GetboolAsString(ColumnNames.IsFree);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsFree);
                else
                    this.IsFree = base.SetboolAsString(ColumnNames.IsFree, value);
            }
        }

        public virtual string s_IsDiscontinued
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsDiscontinued) ? string.Empty : base.GetboolAsString(ColumnNames.IsDiscontinued);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsDiscontinued);
                else
                    this.IsDiscontinued = base.SetboolAsString(ColumnNames.IsDiscontinued, value);
            }
        }

        public virtual string s_Cost
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Cost) ? string.Empty : base.GetstringAsString(ColumnNames.Cost);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Cost);
                else
                    this.Cost = base.SetstringAsString(ColumnNames.Cost, value);
            }
        }

        public virtual string s_EDL
        {
            get
            {
                return this.IsColumnNull(ColumnNames.EDL) ? string.Empty : base.GetboolAsString(ColumnNames.EDL);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.EDL);
                else
                    this.EDL = base.SetboolAsString(ColumnNames.EDL, value);
            }
        }

        public virtual string s_Refrigeratored
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Refrigeratored) ? string.Empty : base.GetboolAsString(ColumnNames.Refrigeratored);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Refrigeratored);
                else
                    this.Refrigeratored = base.SetboolAsString(ColumnNames.Refrigeratored, value);
            }
        }

        public virtual string s_Pediatric
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Pediatric) ? string.Empty : base.GetboolAsString(ColumnNames.Pediatric);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Pediatric);
                else
                    this.Pediatric = base.SetboolAsString(ColumnNames.Pediatric, value);
            }
        }

        public virtual string s_IINID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IINID) ? string.Empty : base.GetintAsString(ColumnNames.IINID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IINID);
                else
                    this.IINID = base.SetintAsString(ColumnNames.IINID, value);
            }
        }

        public virtual string s_IsInHospitalList
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsInHospitalList) ? string.Empty : base.GetboolAsString(ColumnNames.IsInHospitalList);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsInHospitalList);
                else
                    this.IsInHospitalList = base.SetboolAsString(ColumnNames.IsInHospitalList, value);
            }
        }

        public virtual string s_NeedExpiryBatch
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NeedExpiryBatch) ? string.Empty : base.GetboolAsString(ColumnNames.NeedExpiryBatch);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NeedExpiryBatch);
                else
                    this.NeedExpiryBatch = base.SetboolAsString(ColumnNames.NeedExpiryBatch, value);
            }
        }

        public virtual string s_Code
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Code) ? string.Empty : base.GetstringAsString(ColumnNames.Code);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Code);
                else
                    this.Code = base.SetstringAsString(ColumnNames.Code, value);
            }
        }

        public virtual string s_StockCodeDACA
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StockCodeDACA) ? string.Empty : base.GetstringAsString(ColumnNames.StockCodeDACA);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StockCodeDACA);
                else
                    this.StockCodeDACA = base.SetstringAsString(ColumnNames.StockCodeDACA, value);
            }
        }

        public virtual string s_NearExpiryTrigger
        {
            get
            {
                return this.IsColumnNull(ColumnNames.NearExpiryTrigger) ? string.Empty : base.GetdoubleAsString(ColumnNames.NearExpiryTrigger);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.NearExpiryTrigger);
                else
                    this.NearExpiryTrigger = base.SetdoubleAsString(ColumnNames.NearExpiryTrigger, value);
            }
        }

        public virtual string s_StorageTypeID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.StorageTypeID) ? string.Empty : base.GetintAsString(ColumnNames.StorageTypeID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.StorageTypeID);
                else
                    this.StorageTypeID = base.SetintAsString(ColumnNames.StorageTypeID, value);
            }
        }

        public virtual string s_DSItemID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DSItemID) ? string.Empty : base.GetintAsString(ColumnNames.DSItemID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DSItemID);
                else
                    this.DSItemID = base.SetintAsString(ColumnNames.DSItemID, value);
            }
        }

        public virtual string s_IsPFSAVital
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsPFSAVital) ? string.Empty : base.GetboolAsString(ColumnNames.IsPFSAVital);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsPFSAVital);
                else
                    this.IsPFSAVital = base.SetboolAsString(ColumnNames.IsPFSAVital, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StockCode
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StockCode, Parameters.StockCode);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Strength
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Strength, Parameters.Strength);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DosageFormID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UnitID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter VEN
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.VEN, Parameters.VEN);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ABC
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ABC, Parameters.ABC);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsFree
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsFree, Parameters.IsFree);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsDiscontinued
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsDiscontinued, Parameters.IsDiscontinued);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Cost
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter EDL
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.EDL, Parameters.EDL);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Refrigeratored
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Refrigeratored, Parameters.Refrigeratored);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Pediatric
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Pediatric, Parameters.Pediatric);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IINID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IINID, Parameters.IINID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsInHospitalList
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsInHospitalList, Parameters.IsInHospitalList);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NeedExpiryBatch
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NeedExpiryBatch, Parameters.NeedExpiryBatch);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Code
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Code, Parameters.Code);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StockCodeDACA
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StockCodeDACA, Parameters.StockCodeDACA);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter NearExpiryTrigger
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.NearExpiryTrigger, Parameters.NearExpiryTrigger);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter StorageTypeID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DSItemID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DSItemID, Parameters.DSItemID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsPFSAVital
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsPFSAVital, Parameters.IsPFSAVital);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter StockCode
            {
                get
                {
                    if (_StockCode_W == null)
                    {
                        _StockCode_W = TearOff.StockCode;
                    }
                    return _StockCode_W;
                }
            }

            public WhereParameter Strength
            {
                get
                {
                    if (_Strength_W == null)
                    {
                        _Strength_W = TearOff.Strength;
                    }
                    return _Strength_W;
                }
            }

            public WhereParameter DosageFormID
            {
                get
                {
                    if (_DosageFormID_W == null)
                    {
                        _DosageFormID_W = TearOff.DosageFormID;
                    }
                    return _DosageFormID_W;
                }
            }

            public WhereParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public WhereParameter VEN
            {
                get
                {
                    if (_VEN_W == null)
                    {
                        _VEN_W = TearOff.VEN;
                    }
                    return _VEN_W;
                }
            }

            public WhereParameter ABC
            {
                get
                {
                    if (_ABC_W == null)
                    {
                        _ABC_W = TearOff.ABC;
                    }
                    return _ABC_W;
                }
            }

            public WhereParameter IsFree
            {
                get
                {
                    if (_IsFree_W == null)
                    {
                        _IsFree_W = TearOff.IsFree;
                    }
                    return _IsFree_W;
                }
            }

            public WhereParameter IsDiscontinued
            {
                get
                {
                    if (_IsDiscontinued_W == null)
                    {
                        _IsDiscontinued_W = TearOff.IsDiscontinued;
                    }
                    return _IsDiscontinued_W;
                }
            }

            public WhereParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public WhereParameter EDL
            {
                get
                {
                    if (_EDL_W == null)
                    {
                        _EDL_W = TearOff.EDL;
                    }
                    return _EDL_W;
                }
            }

            public WhereParameter Refrigeratored
            {
                get
                {
                    if (_Refrigeratored_W == null)
                    {
                        _Refrigeratored_W = TearOff.Refrigeratored;
                    }
                    return _Refrigeratored_W;
                }
            }

            public WhereParameter Pediatric
            {
                get
                {
                    if (_Pediatric_W == null)
                    {
                        _Pediatric_W = TearOff.Pediatric;
                    }
                    return _Pediatric_W;
                }
            }

            public WhereParameter IINID
            {
                get
                {
                    if (_IINID_W == null)
                    {
                        _IINID_W = TearOff.IINID;
                    }
                    return _IINID_W;
                }
            }

            public WhereParameter IsInHospitalList
            {
                get
                {
                    if (_IsInHospitalList_W == null)
                    {
                        _IsInHospitalList_W = TearOff.IsInHospitalList;
                    }
                    return _IsInHospitalList_W;
                }
            }

            public WhereParameter NeedExpiryBatch
            {
                get
                {
                    if (_NeedExpiryBatch_W == null)
                    {
                        _NeedExpiryBatch_W = TearOff.NeedExpiryBatch;
                    }
                    return _NeedExpiryBatch_W;
                }
            }

            public WhereParameter Code
            {
                get
                {
                    if (_Code_W == null)
                    {
                        _Code_W = TearOff.Code;
                    }
                    return _Code_W;
                }
            }

            public WhereParameter StockCodeDACA
            {
                get
                {
                    if (_StockCodeDACA_W == null)
                    {
                        _StockCodeDACA_W = TearOff.StockCodeDACA;
                    }
                    return _StockCodeDACA_W;
                }
            }

            public WhereParameter NearExpiryTrigger
            {
                get
                {
                    if (_NearExpiryTrigger_W == null)
                    {
                        _NearExpiryTrigger_W = TearOff.NearExpiryTrigger;
                    }
                    return _NearExpiryTrigger_W;
                }
            }

            public WhereParameter StorageTypeID
            {
                get
                {
                    if (_StorageTypeID_W == null)
                    {
                        _StorageTypeID_W = TearOff.StorageTypeID;
                    }
                    return _StorageTypeID_W;
                }
            }

            public WhereParameter DSItemID
            {
                get
                {
                    if (_DSItemID_W == null)
                    {
                        _DSItemID_W = TearOff.DSItemID;
                    }
                    return _DSItemID_W;
                }
            }

            public WhereParameter IsPFSAVital
            {
                get
                {
                    if (_IsPFSAVital_W == null)
                    {
                        _IsPFSAVital_W = TearOff.IsPFSAVital;
                    }
                    return _IsPFSAVital_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _StockCode_W = null;
            private WhereParameter _Strength_W = null;
            private WhereParameter _DosageFormID_W = null;
            private WhereParameter _UnitID_W = null;
            private WhereParameter _VEN_W = null;
            private WhereParameter _ABC_W = null;
            private WhereParameter _IsFree_W = null;
            private WhereParameter _IsDiscontinued_W = null;
            private WhereParameter _Cost_W = null;
            private WhereParameter _EDL_W = null;
            private WhereParameter _Refrigeratored_W = null;
            private WhereParameter _Pediatric_W = null;
            private WhereParameter _IINID_W = null;
            private WhereParameter _IsInHospitalList_W = null;
            private WhereParameter _NeedExpiryBatch_W = null;
            private WhereParameter _Code_W = null;
            private WhereParameter _StockCodeDACA_W = null;
            private WhereParameter _NearExpiryTrigger_W = null;
            private WhereParameter _StorageTypeID_W = null;
            private WhereParameter _DSItemID_W = null;
            private WhereParameter _IsPFSAVital_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _StockCode_W = null;
                _Strength_W = null;
                _DosageFormID_W = null;
                _UnitID_W = null;
                _VEN_W = null;
                _ABC_W = null;
                _IsFree_W = null;
                _IsDiscontinued_W = null;
                _Cost_W = null;
                _EDL_W = null;
                _Refrigeratored_W = null;
                _Pediatric_W = null;
                _IINID_W = null;
                _IsInHospitalList_W = null;
                _NeedExpiryBatch_W = null;
                _Code_W = null;
                _StockCodeDACA_W = null;
                _NearExpiryTrigger_W = null;
                _StorageTypeID_W = null;
                _DSItemID_W = null;
                _IsPFSAVital_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StockCode
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockCode, Parameters.StockCode);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Strength
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Strength, Parameters.Strength);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DosageFormID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DosageFormID, Parameters.DosageFormID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UnitID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UnitID, Parameters.UnitID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter VEN
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.VEN, Parameters.VEN);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ABC
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ABC, Parameters.ABC);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsFree
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsFree, Parameters.IsFree);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsDiscontinued
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsDiscontinued, Parameters.IsDiscontinued);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Cost
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cost, Parameters.Cost);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter EDL
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EDL, Parameters.EDL);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Refrigeratored
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Refrigeratored, Parameters.Refrigeratored);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Pediatric
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Pediatric, Parameters.Pediatric);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IINID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IINID, Parameters.IINID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsInHospitalList
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsInHospitalList, Parameters.IsInHospitalList);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NeedExpiryBatch
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NeedExpiryBatch, Parameters.NeedExpiryBatch);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Code
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Code, Parameters.Code);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StockCodeDACA
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StockCodeDACA, Parameters.StockCodeDACA);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter NearExpiryTrigger
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.NearExpiryTrigger, Parameters.NearExpiryTrigger);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter StorageTypeID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.StorageTypeID, Parameters.StorageTypeID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DSItemID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DSItemID, Parameters.DSItemID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsPFSAVital
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsPFSAVital, Parameters.IsPFSAVital);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter StockCode
            {
                get
                {
                    if (_StockCode_W == null)
                    {
                        _StockCode_W = TearOff.StockCode;
                    }
                    return _StockCode_W;
                }
            }

            public AggregateParameter Strength
            {
                get
                {
                    if (_Strength_W == null)
                    {
                        _Strength_W = TearOff.Strength;
                    }
                    return _Strength_W;
                }
            }

            public AggregateParameter DosageFormID
            {
                get
                {
                    if (_DosageFormID_W == null)
                    {
                        _DosageFormID_W = TearOff.DosageFormID;
                    }
                    return _DosageFormID_W;
                }
            }

            public AggregateParameter UnitID
            {
                get
                {
                    if (_UnitID_W == null)
                    {
                        _UnitID_W = TearOff.UnitID;
                    }
                    return _UnitID_W;
                }
            }

            public AggregateParameter VEN
            {
                get
                {
                    if (_VEN_W == null)
                    {
                        _VEN_W = TearOff.VEN;
                    }
                    return _VEN_W;
                }
            }

            public AggregateParameter ABC
            {
                get
                {
                    if (_ABC_W == null)
                    {
                        _ABC_W = TearOff.ABC;
                    }
                    return _ABC_W;
                }
            }

            public AggregateParameter IsFree
            {
                get
                {
                    if (_IsFree_W == null)
                    {
                        _IsFree_W = TearOff.IsFree;
                    }
                    return _IsFree_W;
                }
            }

            public AggregateParameter IsDiscontinued
            {
                get
                {
                    if (_IsDiscontinued_W == null)
                    {
                        _IsDiscontinued_W = TearOff.IsDiscontinued;
                    }
                    return _IsDiscontinued_W;
                }
            }

            public AggregateParameter Cost
            {
                get
                {
                    if (_Cost_W == null)
                    {
                        _Cost_W = TearOff.Cost;
                    }
                    return _Cost_W;
                }
            }

            public AggregateParameter EDL
            {
                get
                {
                    if (_EDL_W == null)
                    {
                        _EDL_W = TearOff.EDL;
                    }
                    return _EDL_W;
                }
            }

            public AggregateParameter Refrigeratored
            {
                get
                {
                    if (_Refrigeratored_W == null)
                    {
                        _Refrigeratored_W = TearOff.Refrigeratored;
                    }
                    return _Refrigeratored_W;
                }
            }

            public AggregateParameter Pediatric
            {
                get
                {
                    if (_Pediatric_W == null)
                    {
                        _Pediatric_W = TearOff.Pediatric;
                    }
                    return _Pediatric_W;
                }
            }

            public AggregateParameter IINID
            {
                get
                {
                    if (_IINID_W == null)
                    {
                        _IINID_W = TearOff.IINID;
                    }
                    return _IINID_W;
                }
            }

            public AggregateParameter IsInHospitalList
            {
                get
                {
                    if (_IsInHospitalList_W == null)
                    {
                        _IsInHospitalList_W = TearOff.IsInHospitalList;
                    }
                    return _IsInHospitalList_W;
                }
            }

            public AggregateParameter NeedExpiryBatch
            {
                get
                {
                    if (_NeedExpiryBatch_W == null)
                    {
                        _NeedExpiryBatch_W = TearOff.NeedExpiryBatch;
                    }
                    return _NeedExpiryBatch_W;
                }
            }

            public AggregateParameter Code
            {
                get
                {
                    if (_Code_W == null)
                    {
                        _Code_W = TearOff.Code;
                    }
                    return _Code_W;
                }
            }

            public AggregateParameter StockCodeDACA
            {
                get
                {
                    if (_StockCodeDACA_W == null)
                    {
                        _StockCodeDACA_W = TearOff.StockCodeDACA;
                    }
                    return _StockCodeDACA_W;
                }
            }

            public AggregateParameter NearExpiryTrigger
            {
                get
                {
                    if (_NearExpiryTrigger_W == null)
                    {
                        _NearExpiryTrigger_W = TearOff.NearExpiryTrigger;
                    }
                    return _NearExpiryTrigger_W;
                }
            }

            public AggregateParameter StorageTypeID
            {
                get
                {
                    if (_StorageTypeID_W == null)
                    {
                        _StorageTypeID_W = TearOff.StorageTypeID;
                    }
                    return _StorageTypeID_W;
                }
            }

            public AggregateParameter DSItemID
            {
                get
                {
                    if (_DSItemID_W == null)
                    {
                        _DSItemID_W = TearOff.DSItemID;
                    }
                    return _DSItemID_W;
                }
            }

            public AggregateParameter IsPFSAVital
            {
                get
                {
                    if (_IsPFSAVital_W == null)
                    {
                        _IsPFSAVital_W = TearOff.IsPFSAVital;
                    }
                    return _IsPFSAVital_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _StockCode_W = null;
            private AggregateParameter _Strength_W = null;
            private AggregateParameter _DosageFormID_W = null;
            private AggregateParameter _UnitID_W = null;
            private AggregateParameter _VEN_W = null;
            private AggregateParameter _ABC_W = null;
            private AggregateParameter _IsFree_W = null;
            private AggregateParameter _IsDiscontinued_W = null;
            private AggregateParameter _Cost_W = null;
            private AggregateParameter _EDL_W = null;
            private AggregateParameter _Refrigeratored_W = null;
            private AggregateParameter _Pediatric_W = null;
            private AggregateParameter _IINID_W = null;
            private AggregateParameter _IsInHospitalList_W = null;
            private AggregateParameter _NeedExpiryBatch_W = null;
            private AggregateParameter _Code_W = null;
            private AggregateParameter _StockCodeDACA_W = null;
            private AggregateParameter _NearExpiryTrigger_W = null;
            private AggregateParameter _StorageTypeID_W = null;
            private AggregateParameter _DSItemID_W = null;
            private AggregateParameter _IsPFSAVital_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _StockCode_W = null;
                _Strength_W = null;
                _DosageFormID_W = null;
                _UnitID_W = null;
                _VEN_W = null;
                _ABC_W = null;
                _IsFree_W = null;
                _IsDiscontinued_W = null;
                _Cost_W = null;
                _EDL_W = null;
                _Refrigeratored_W = null;
                _Pediatric_W = null;
                _IINID_W = null;
                _IsInHospitalList_W = null;
                _NeedExpiryBatch_W = null;
                _Code_W = null;
                _StockCodeDACA_W = null;
                _NearExpiryTrigger_W = null;
                _StorageTypeID_W = null;
                _DSItemID_W = null;
                _IsPFSAVital_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemsInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemsUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_ItemsDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StockCode);
            p.SourceColumn = ColumnNames.StockCode;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Strength);
            p.SourceColumn = ColumnNames.Strength;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DosageFormID);
            p.SourceColumn = ColumnNames.DosageFormID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UnitID);
            p.SourceColumn = ColumnNames.UnitID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.VEN);
            p.SourceColumn = ColumnNames.VEN;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ABC);
            p.SourceColumn = ColumnNames.ABC;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsFree);
            p.SourceColumn = ColumnNames.IsFree;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsDiscontinued);
            p.SourceColumn = ColumnNames.IsDiscontinued;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Cost);
            p.SourceColumn = ColumnNames.Cost;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EDL);
            p.SourceColumn = ColumnNames.EDL;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Refrigeratored);
            p.SourceColumn = ColumnNames.Refrigeratored;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Pediatric);
            p.SourceColumn = ColumnNames.Pediatric;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IINID);
            p.SourceColumn = ColumnNames.IINID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsInHospitalList);
            p.SourceColumn = ColumnNames.IsInHospitalList;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NeedExpiryBatch);
            p.SourceColumn = ColumnNames.NeedExpiryBatch;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Code);
            p.SourceColumn = ColumnNames.Code;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StockCodeDACA);
            p.SourceColumn = ColumnNames.StockCodeDACA;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.NearExpiryTrigger);
            p.SourceColumn = ColumnNames.NearExpiryTrigger;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.StorageTypeID);
            p.SourceColumn = ColumnNames.StorageTypeID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DSItemID);
            p.SourceColumn = ColumnNames.DSItemID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsPFSAVital);
            p.SourceColumn = ColumnNames.IsPFSAVital;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}
