/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _Model22 : SqlClientEntity
    {
        public _Model22()
        {
            this.QuerySource = "Model22";
            this.MappingName = "Model22";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_Model22LoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_Model22LoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter IssueDocID
            {
                get
                {
                    return new SqlParameter("@IssueDocID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter PackQty
            {
                get
                {
                    return new SqlParameter("@PackQty", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter QtyPerPack
            {
                get
                {
                    return new SqlParameter("@QtyPerPack", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter PackPrice
            {
                get
                {
                    return new SqlParameter("@PackPrice", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter TotalPrice
            {
                get
                {
                    return new SqlParameter("@TotalPrice", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter TotalPackSellingPrice
            {
                get
                {
                    return new SqlParameter("@TotalPackSellingPrice", SqlDbType.Decimal, 0);
                }
            }

            public static SqlParameter PriceRate
            {
                get
                {
                    return new SqlParameter("@PriceRate", SqlDbType.Decimal, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string IssueDocID = "IssueDocID";
            public const string PackQty = "PackQty";
            public const string QtyPerPack = "QtyPerPack";
            public const string PackPrice = "PackPrice";
            public const string TotalPrice = "TotalPrice";
            public const string TotalPackSellingPrice = "TotalPackSellingPrice";
            public const string PriceRate = "priceRate";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Model22.PropertyNames.ID;
                    ht[IssueDocID] = _Model22.PropertyNames.IssueDocID;
                    ht[PackQty] = _Model22.PropertyNames.PackQty;
                    ht[QtyPerPack] = _Model22.PropertyNames.QtyPerPack;
                    ht[PackPrice] = _Model22.PropertyNames.PackPrice;
                    ht[TotalPrice] = _Model22.PropertyNames.TotalPrice;
                    ht[TotalPackSellingPrice] = _Model22.PropertyNames.TotalPackSellingPrice;
                    ht[PriceRate] = _Model22.PropertyNames.PriceRate;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string IssueDocID = "IssueDocID";
            public const string PackQty = "PackQty";
            public const string QtyPerPack = "QtyPerPack";
            public const string PackPrice = "PackPrice";
            public const string TotalPrice = "TotalPrice";
            public const string TotalPackSellingPrice = "TotalPackSellingPrice";
            public const string PriceRate = "PriceRate";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _Model22.ColumnNames.ID;
                    ht[IssueDocID] = _Model22.ColumnNames.IssueDocID;
                    ht[PackQty] = _Model22.ColumnNames.PackQty;
                    ht[QtyPerPack] = _Model22.ColumnNames.QtyPerPack;
                    ht[PackPrice] = _Model22.ColumnNames.PackPrice;
                    ht[TotalPrice] = _Model22.ColumnNames.TotalPrice;
                    ht[TotalPackSellingPrice] = _Model22.ColumnNames.TotalPackSellingPrice;
                    ht[PriceRate] = _Model22.ColumnNames.PriceRate;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string IssueDocID = "s_IssueDocID";
            public const string PackQty = "s_PackQty";
            public const string QtyPerPack = "s_QtyPerPack";
            public const string PackPrice = "s_PackPrice";
            public const string TotalPrice = "s_TotalPrice";
            public const string TotalPackSellingPrice = "s_TotalPackSellingPrice";
            public const string PriceRate = "s_PriceRate";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual int IssueDocID
        {
            get
            {
                return base.Getint(ColumnNames.IssueDocID);
            }
            set
            {
                base.Setint(ColumnNames.IssueDocID, value);
            }
        }

        public virtual int PackQty
        {
            get
            {
                return base.Getint(ColumnNames.PackQty);
            }
            set
            {
                base.Setint(ColumnNames.PackQty, value);
            }
        }

        public virtual decimal QtyPerPack
        {
            get
            {
                return base.Getdecimal(ColumnNames.QtyPerPack);
            }
            set
            {
                base.Setdecimal(ColumnNames.QtyPerPack, value);
            }
        }

        public virtual decimal PackPrice
        {
            get
            {
                return base.Getdecimal(ColumnNames.PackPrice);
            }
            set
            {
                base.Setdecimal(ColumnNames.PackPrice, value);
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return base.Getdecimal(ColumnNames.TotalPrice);
            }
            set
            {
                base.Setdecimal(ColumnNames.TotalPrice, value);
            }
        }

        public virtual decimal TotalPackSellingPrice
        {
            get
            {
                return base.Getdecimal(ColumnNames.TotalPackSellingPrice);
            }
            set
            {
                base.Setdecimal(ColumnNames.TotalPackSellingPrice, value);
            }
        }

        public virtual decimal PriceRate
        {
            get
            {
                return base.Getdecimal(ColumnNames.PriceRate);
            }
            set
            {
                base.Setdecimal(ColumnNames.PriceRate, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_IssueDocID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IssueDocID) ? string.Empty : base.GetintAsString(ColumnNames.IssueDocID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IssueDocID);
                else
                    this.IssueDocID = base.SetintAsString(ColumnNames.IssueDocID, value);
            }
        }

        public virtual string s_PackQty
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PackQty) ? string.Empty : base.GetintAsString(ColumnNames.PackQty);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PackQty);
                else
                    this.PackQty = base.SetintAsString(ColumnNames.PackQty, value);
            }
        }

        public virtual string s_QtyPerPack
        {
            get
            {
                return this.IsColumnNull(ColumnNames.QtyPerPack) ? string.Empty : base.GetdecimalAsString(ColumnNames.QtyPerPack);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.QtyPerPack);
                else
                    this.QtyPerPack = base.SetdecimalAsString(ColumnNames.QtyPerPack, value);
            }
        }

        public virtual string s_PackPrice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PackPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.PackPrice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PackPrice);
                else
                    this.PackPrice = base.SetdecimalAsString(ColumnNames.PackPrice, value);
            }
        }

        public virtual string s_TotalPrice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TotalPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.TotalPrice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TotalPrice);
                else
                    this.TotalPrice = base.SetdecimalAsString(ColumnNames.TotalPrice, value);
            }
        }

        public virtual string s_TotalPackSellingPrice
        {
            get
            {
                return this.IsColumnNull(ColumnNames.TotalPackSellingPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.TotalPackSellingPrice);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.TotalPackSellingPrice);
                else
                    this.TotalPackSellingPrice = base.SetdecimalAsString(ColumnNames.TotalPackSellingPrice, value);
            }
        }

        public virtual string s_PriceRate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PriceRate) ? string.Empty : base.GetdecimalAsString(ColumnNames.PriceRate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PriceRate);
                else
                    this.PriceRate = base.SetdecimalAsString(ColumnNames.PriceRate, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IssueDocID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IssueDocID, Parameters.IssueDocID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PackQty
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PackQty, Parameters.PackQty);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter QtyPerPack
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PackPrice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PackPrice, Parameters.PackPrice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TotalPrice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter TotalPackSellingPrice
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.TotalPackSellingPrice, Parameters.TotalPackSellingPrice);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PriceRate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PriceRate, Parameters.PriceRate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter IssueDocID
            {
                get
                {
                    if (_IssueDocID_W == null)
                    {
                        _IssueDocID_W = TearOff.IssueDocID;
                    }
                    return _IssueDocID_W;
                }
            }

            public WhereParameter PackQty
            {
                get
                {
                    if (_PackQty_W == null)
                    {
                        _PackQty_W = TearOff.PackQty;
                    }
                    return _PackQty_W;
                }
            }

            public WhereParameter QtyPerPack
            {
                get
                {
                    if (_QtyPerPack_W == null)
                    {
                        _QtyPerPack_W = TearOff.QtyPerPack;
                    }
                    return _QtyPerPack_W;
                }
            }

            public WhereParameter PackPrice
            {
                get
                {
                    if (_PackPrice_W == null)
                    {
                        _PackPrice_W = TearOff.PackPrice;
                    }
                    return _PackPrice_W;
                }
            }

            public WhereParameter TotalPrice
            {
                get
                {
                    if (_TotalPrice_W == null)
                    {
                        _TotalPrice_W = TearOff.TotalPrice;
                    }
                    return _TotalPrice_W;
                }
            }

            public WhereParameter TotalPackSellingPrice
            {
                get
                {
                    if (_TotalPackSellingPrice_W == null)
                    {
                        _TotalPackSellingPrice_W = TearOff.TotalPackSellingPrice;
                    }
                    return _TotalPackSellingPrice_W;
                }
            }

            public WhereParameter PriceRate
            {
                get
                {
                    if (_PriceRate_W == null)
                    {
                        _PriceRate_W = TearOff.PriceRate;
                    }
                    return _PriceRate_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _IssueDocID_W = null;
            private WhereParameter _PackQty_W = null;
            private WhereParameter _QtyPerPack_W = null;
            private WhereParameter _PackPrice_W = null;
            private WhereParameter _TotalPrice_W = null;
            private WhereParameter _TotalPackSellingPrice_W = null;
            private WhereParameter _PriceRate_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _IssueDocID_W = null;
                _PackQty_W = null;
                _QtyPerPack_W = null;
                _PackPrice_W = null;
                _TotalPrice_W = null;
                _TotalPackSellingPrice_W = null;
                _PriceRate_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IssueDocID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IssueDocID, Parameters.IssueDocID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PackQty
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PackQty, Parameters.PackQty);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter QtyPerPack
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.QtyPerPack, Parameters.QtyPerPack);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PackPrice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PackPrice, Parameters.PackPrice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TotalPrice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalPrice, Parameters.TotalPrice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter TotalPackSellingPrice
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalPackSellingPrice, Parameters.TotalPackSellingPrice);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PriceRate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceRate, Parameters.PriceRate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter IssueDocID
            {
                get
                {
                    if (_IssueDocID_W == null)
                    {
                        _IssueDocID_W = TearOff.IssueDocID;
                    }
                    return _IssueDocID_W;
                }
            }

            public AggregateParameter PackQty
            {
                get
                {
                    if (_PackQty_W == null)
                    {
                        _PackQty_W = TearOff.PackQty;
                    }
                    return _PackQty_W;
                }
            }

            public AggregateParameter QtyPerPack
            {
                get
                {
                    if (_QtyPerPack_W == null)
                    {
                        _QtyPerPack_W = TearOff.QtyPerPack;
                    }
                    return _QtyPerPack_W;
                }
            }

            public AggregateParameter PackPrice
            {
                get
                {
                    if (_PackPrice_W == null)
                    {
                        _PackPrice_W = TearOff.PackPrice;
                    }
                    return _PackPrice_W;
                }
            }

            public AggregateParameter TotalPrice
            {
                get
                {
                    if (_TotalPrice_W == null)
                    {
                        _TotalPrice_W = TearOff.TotalPrice;
                    }
                    return _TotalPrice_W;
                }
            }

            public AggregateParameter TotalPackSellingPrice
            {
                get
                {
                    if (_TotalPackSellingPrice_W == null)
                    {
                        _TotalPackSellingPrice_W = TearOff.TotalPackSellingPrice;
                    }
                    return _TotalPackSellingPrice_W;
                }
            }

            public AggregateParameter PriceRate
            {
                get
                {
                    if (_PriceRate_W == null)
                    {
                        _PriceRate_W = TearOff.PriceRate;
                    }
                    return _PriceRate_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _IssueDocID_W = null;
            private AggregateParameter _PackQty_W = null;
            private AggregateParameter _QtyPerPack_W = null;
            private AggregateParameter _PackPrice_W = null;
            private AggregateParameter _TotalPrice_W = null;
            private AggregateParameter _TotalPackSellingPrice_W = null;
            private AggregateParameter _PriceRate_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _IssueDocID_W = null;
                _PackQty_W = null;
                _QtyPerPack_W = null;
                _PackPrice_W = null;
                _TotalPrice_W = null;
                _TotalPackSellingPrice_W = null;
                _PriceRate_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_Model22Insert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_Model22Update]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_Model22Delete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IssueDocID);
            p.SourceColumn = ColumnNames.IssueDocID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PackQty);
            p.SourceColumn = ColumnNames.PackQty;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.QtyPerPack);
            p.SourceColumn = ColumnNames.QtyPerPack;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PackPrice);
            p.SourceColumn = ColumnNames.PackPrice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TotalPrice);
            p.SourceColumn = ColumnNames.TotalPrice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.TotalPackSellingPrice);
            p.SourceColumn = ColumnNames.TotalPackSellingPrice;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PriceRate);
            p.SourceColumn = ColumnNames.PriceRate;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}