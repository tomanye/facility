/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.7)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace DAL
{
    public abstract class _GeneralInfo : SqlClientEntity
    {
        public _GeneralInfo()
        {
            this.QuerySource = "GeneralInfo";
            this.MappingName = "GeneralInfo";

        }

        //=================================================================
        //  public Overrides void AddNew()
        //=================================================================
        //
        //=================================================================
        public override void AddNew()
        {
            base.AddNew();

        }


        public override void FlushData()
        {
            this._whereClause = null;
            this._aggregateClause = null;
            base.FlushData();
        }

        //=================================================================
        //  	public Function LoadAll() As Boolean
        //=================================================================
        //  Loads all of the records in the database, and sets the currentRow to the first row
        //=================================================================
        public bool LoadAll()
        {
            ListDictionary parameters = null;

            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_GeneralInfoLoadAll]", parameters);
        }

        //=================================================================
        // public Overridable Function LoadByPrimaryKey()  As Boolean
        //=================================================================
        //  Loads a single row of via the primary key
        //=================================================================
        public virtual bool LoadByPrimaryKey(int ID)
        {
            ListDictionary parameters = new ListDictionary();
            parameters.Add(Parameters.ID, ID);


            return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_GeneralInfoLoadByPrimaryKey]", parameters);
        }

        #region Parameters
        protected class Parameters
        {

            public static SqlParameter ID
            {
                get
                {
                    return new SqlParameter("@ID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter HospitalName
            {
                get
                {
                    return new SqlParameter("@HospitalName", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter Woreda
            {
                get
                {
                    return new SqlParameter("@Woreda", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Zone
            {
                get
                {
                    return new SqlParameter("@Zone", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Region
            {
                get
                {
                    return new SqlParameter("@Region", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Telephone
            {
                get
                {
                    return new SqlParameter("@Telephone", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter HospitalContact
            {
                get
                {
                    return new SqlParameter("@HospitalContact", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter LeadTime
            {
                get
                {
                    return new SqlParameter("@LeadTime", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Min
            {
                get
                {
                    return new SqlParameter("@Min", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter Max
            {
                get
                {
                    return new SqlParameter("@Max", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter SafteyStock
            {
                get
                {
                    return new SqlParameter("@SafteyStock", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter AMCRange
            {
                get
                {
                    return new SqlParameter("@AMCRange", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter ReviewPeriod
            {
                get
                {
                    return new SqlParameter("@ReviewPeriod", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter EOP
            {
                get
                {
                    return new SqlParameter("@EOP", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter Description
            {
                get
                {
                    return new SqlParameter("@Description", SqlDbType.Text, 2147483647);
                }
            }

            public static SqlParameter IsEven
            {
                get
                {
                    return new SqlParameter("@IsEven", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter Logo
            {
                get
                {
                    return new SqlParameter("@Logo", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter DUMin
            {
                get
                {
                    return new SqlParameter("@DUMin", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter DUMax
            {
                get
                {
                    return new SqlParameter("@DUMax", SqlDbType.Float, 0);
                }
            }

            public static SqlParameter DUAMCRange
            {
                get
                {
                    return new SqlParameter("@DUAMCRange", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter LastBackUp
            {
                get
                {
                    return new SqlParameter("@LastBackUp", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter FacilityID
            {
                get
                {
                    return new SqlParameter("@FacilityID", SqlDbType.Int, 0);
                }
            }

            public static SqlParameter LastSync
            {
                get
                {
                    return new SqlParameter("@LastSync", SqlDbType.DateTime, 0);
                }
            }

            public static SqlParameter DSUpdateFrequency
            {
                get
                {
                    return new SqlParameter("@DSUpdateFrequency", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter RRFStatusUpdateFrequency
            {
                get
                {
                    return new SqlParameter("@RRFStatusUpdateFrequency", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter RRFStatusFirstUpdateAfter
            {
                get
                {
                    return new SqlParameter("@RRFStatusFirstUpdateAfter", SqlDbType.VarChar, 50);
                }
            }

            public static SqlParameter ScmsWSUserName
            {
                get
                {
                    return new SqlParameter("@ScmsWSUserName", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter ScmsWSPassword
            {
                get
                {
                    return new SqlParameter("@ScmsWSPassword", SqlDbType.NVarChar, 100);
                }
            }

            public static SqlParameter UsesModel
            {
                get
                {
                    return new SqlParameter("@UsesModel", SqlDbType.Bit, 0);
                }
            }

            public static SqlParameter PriceRate
            {
                get
                {
                    return new SqlParameter("@PriceRate", SqlDbType.Decimal, 0);
                }
            }

        }
        #endregion

        #region ColumnNames
        public class ColumnNames
        {
            public const string ID = "ID";
            public const string HospitalName = "HospitalName";
            public const string Woreda = "Woreda";
            public const string Zone = "Zone";
            public const string Region = "Region";
            public const string Telephone = "Telephone";
            public const string HospitalContact = "HospitalContact";
            public const string LeadTime = "LeadTime";
            public const string Min = "Min";
            public const string Max = "Max";
            public const string SafteyStock = "SafteyStock";
            public const string AMCRange = "AMCRange";
            public const string ReviewPeriod = "ReviewPeriod";
            public const string EOP = "EOP";
            public const string Description = "Description";
            public const string IsEven = "IsEven";
            public const string Logo = "Logo";
            public const string DUMin = "DUMin";
            public const string DUMax = "DUMax";
            public const string DUAMCRange = "DUAMCRange";
            public const string LastBackUp = "LastBackUp";
            public const string FacilityID = "FacilityID";
            public const string LastSync = "LastSync";
            public const string DSUpdateFrequency = "DSUpdateFrequency";
            public const string RRFStatusUpdateFrequency = "RRFStatusUpdateFrequency";
            public const string RRFStatusFirstUpdateAfter = "RRFStatusFirstUpdateAfter";
            public const string ScmsWSUserName = "ScmsWSUserName";
            public const string ScmsWSPassword = "scmsWSPassword";
            public const string UsesModel = "usesModel";
            public const string PriceRate = "priceRate";

            static public string ToPropertyName(string columnName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _GeneralInfo.PropertyNames.ID;
                    ht[HospitalName] = _GeneralInfo.PropertyNames.HospitalName;
                    ht[Woreda] = _GeneralInfo.PropertyNames.Woreda;
                    ht[Zone] = _GeneralInfo.PropertyNames.Zone;
                    ht[Region] = _GeneralInfo.PropertyNames.Region;
                    ht[Telephone] = _GeneralInfo.PropertyNames.Telephone;
                    ht[HospitalContact] = _GeneralInfo.PropertyNames.HospitalContact;
                    ht[LeadTime] = _GeneralInfo.PropertyNames.LeadTime;
                    ht[Min] = _GeneralInfo.PropertyNames.Min;
                    ht[Max] = _GeneralInfo.PropertyNames.Max;
                    ht[SafteyStock] = _GeneralInfo.PropertyNames.SafteyStock;
                    ht[AMCRange] = _GeneralInfo.PropertyNames.AMCRange;
                    ht[ReviewPeriod] = _GeneralInfo.PropertyNames.ReviewPeriod;
                    ht[EOP] = _GeneralInfo.PropertyNames.EOP;
                    ht[Description] = _GeneralInfo.PropertyNames.Description;
                    ht[IsEven] = _GeneralInfo.PropertyNames.IsEven;
                    ht[Logo] = _GeneralInfo.PropertyNames.Logo;
                    ht[DUMin] = _GeneralInfo.PropertyNames.DUMin;
                    ht[DUMax] = _GeneralInfo.PropertyNames.DUMax;
                    ht[DUAMCRange] = _GeneralInfo.PropertyNames.DUAMCRange;
                    ht[LastBackUp] = _GeneralInfo.PropertyNames.LastBackUp;
                    ht[FacilityID] = _GeneralInfo.PropertyNames.FacilityID;
                    ht[LastSync] = _GeneralInfo.PropertyNames.LastSync;
                    ht[DSUpdateFrequency] = _GeneralInfo.PropertyNames.DSUpdateFrequency;
                    ht[RRFStatusUpdateFrequency] = _GeneralInfo.PropertyNames.RRFStatusUpdateFrequency;
                    ht[RRFStatusFirstUpdateAfter] = _GeneralInfo.PropertyNames.RRFStatusFirstUpdateAfter;
                    ht[ScmsWSUserName] = _GeneralInfo.PropertyNames.ScmsWSUserName;
                    ht[ScmsWSPassword] = _GeneralInfo.PropertyNames.ScmsWSPassword;
                    ht[UsesModel] = _GeneralInfo.PropertyNames.UsesModel;
                    ht[PriceRate] = _GeneralInfo.PropertyNames.PriceRate;

                }
                return (string)ht[columnName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region PropertyNames
        public class PropertyNames
        {
            public const string ID = "ID";
            public const string HospitalName = "HospitalName";
            public const string Woreda = "Woreda";
            public const string Zone = "Zone";
            public const string Region = "Region";
            public const string Telephone = "Telephone";
            public const string HospitalContact = "HospitalContact";
            public const string LeadTime = "LeadTime";
            public const string Min = "Min";
            public const string Max = "Max";
            public const string SafteyStock = "SafteyStock";
            public const string AMCRange = "AMCRange";
            public const string ReviewPeriod = "ReviewPeriod";
            public const string EOP = "EOP";
            public const string Description = "Description";
            public const string IsEven = "IsEven";
            public const string Logo = "Logo";
            public const string DUMin = "DUMin";
            public const string DUMax = "DUMax";
            public const string DUAMCRange = "DUAMCRange";
            public const string LastBackUp = "LastBackUp";
            public const string FacilityID = "FacilityID";
            public const string LastSync = "LastSync";
            public const string DSUpdateFrequency = "DSUpdateFrequency";
            public const string RRFStatusUpdateFrequency = "RRFStatusUpdateFrequency";
            public const string RRFStatusFirstUpdateAfter = "RRFStatusFirstUpdateAfter";
            public const string ScmsWSUserName = "ScmsWSUserName";
            public const string ScmsWSPassword = "ScmsWSPassword";
            public const string UsesModel = "UsesModel";
            public const string PriceRate = "PriceRate";

            static public string ToColumnName(string propertyName)
            {
                if (ht == null)
                {
                    ht = new Hashtable();

                    ht[ID] = _GeneralInfo.ColumnNames.ID;
                    ht[HospitalName] = _GeneralInfo.ColumnNames.HospitalName;
                    ht[Woreda] = _GeneralInfo.ColumnNames.Woreda;
                    ht[Zone] = _GeneralInfo.ColumnNames.Zone;
                    ht[Region] = _GeneralInfo.ColumnNames.Region;
                    ht[Telephone] = _GeneralInfo.ColumnNames.Telephone;
                    ht[HospitalContact] = _GeneralInfo.ColumnNames.HospitalContact;
                    ht[LeadTime] = _GeneralInfo.ColumnNames.LeadTime;
                    ht[Min] = _GeneralInfo.ColumnNames.Min;
                    ht[Max] = _GeneralInfo.ColumnNames.Max;
                    ht[SafteyStock] = _GeneralInfo.ColumnNames.SafteyStock;
                    ht[AMCRange] = _GeneralInfo.ColumnNames.AMCRange;
                    ht[ReviewPeriod] = _GeneralInfo.ColumnNames.ReviewPeriod;
                    ht[EOP] = _GeneralInfo.ColumnNames.EOP;
                    ht[Description] = _GeneralInfo.ColumnNames.Description;
                    ht[IsEven] = _GeneralInfo.ColumnNames.IsEven;
                    ht[Logo] = _GeneralInfo.ColumnNames.Logo;
                    ht[DUMin] = _GeneralInfo.ColumnNames.DUMin;
                    ht[DUMax] = _GeneralInfo.ColumnNames.DUMax;
                    ht[DUAMCRange] = _GeneralInfo.ColumnNames.DUAMCRange;
                    ht[LastBackUp] = _GeneralInfo.ColumnNames.LastBackUp;
                    ht[FacilityID] = _GeneralInfo.ColumnNames.FacilityID;
                    ht[LastSync] = _GeneralInfo.ColumnNames.LastSync;
                    ht[DSUpdateFrequency] = _GeneralInfo.ColumnNames.DSUpdateFrequency;
                    ht[RRFStatusUpdateFrequency] = _GeneralInfo.ColumnNames.RRFStatusUpdateFrequency;
                    ht[RRFStatusFirstUpdateAfter] = _GeneralInfo.ColumnNames.RRFStatusFirstUpdateAfter;
                    ht[ScmsWSUserName] = _GeneralInfo.ColumnNames.ScmsWSUserName;
                    ht[ScmsWSPassword] = _GeneralInfo.ColumnNames.ScmsWSPassword;
                    ht[UsesModel] = _GeneralInfo.ColumnNames.UsesModel;
                    ht[PriceRate] = _GeneralInfo.ColumnNames.PriceRate;

                }
                return (string)ht[propertyName];
            }

            static private Hashtable ht = null;
        }
        #endregion

        #region StringPropertyNames
        public class StringPropertyNames
        {
            public const string ID = "s_ID";
            public const string HospitalName = "s_HospitalName";
            public const string Woreda = "s_Woreda";
            public const string Zone = "s_Zone";
            public const string Region = "s_Region";
            public const string Telephone = "s_Telephone";
            public const string HospitalContact = "s_HospitalContact";
            public const string LeadTime = "s_LeadTime";
            public const string Min = "s_Min";
            public const string Max = "s_Max";
            public const string SafteyStock = "s_SafteyStock";
            public const string AMCRange = "s_AMCRange";
            public const string ReviewPeriod = "s_ReviewPeriod";
            public const string EOP = "s_EOP";
            public const string Description = "s_Description";
            public const string IsEven = "s_IsEven";
            public const string Logo = "s_Logo";
            public const string DUMin = "s_DUMin";
            public const string DUMax = "s_DUMax";
            public const string DUAMCRange = "s_DUAMCRange";
            public const string LastBackUp = "s_LastBackUp";
            public const string FacilityID = "s_FacilityID";
            public const string LastSync = "s_LastSync";
            public const string DSUpdateFrequency = "s_DSUpdateFrequency";
            public const string RRFStatusUpdateFrequency = "s_RRFStatusUpdateFrequency";
            public const string RRFStatusFirstUpdateAfter = "s_RRFStatusFirstUpdateAfter";
            public const string ScmsWSUserName = "s_ScmsWSUserName";
            public const string ScmsWSPassword = "s_ScmsWSPassword";
            public const string UsesModel = "s_UsesModel";
            public const string PriceRate = "s_PriceRate";

        }
        #endregion

        #region Properties

        public virtual int ID
        {
            get
            {
                return base.Getint(ColumnNames.ID);
            }
            set
            {
                base.Setint(ColumnNames.ID, value);
            }
        }

        public virtual string HospitalName
        {
            get
            {
                return base.Getstring(ColumnNames.HospitalName);
            }
            set
            {
                base.Setstring(ColumnNames.HospitalName, value);
            }
        }

        public virtual int Woreda
        {
            get
            {
                return base.Getint(ColumnNames.Woreda);
            }
            set
            {
                base.Setint(ColumnNames.Woreda, value);
            }
        }

        public virtual int Zone
        {
            get
            {
                return base.Getint(ColumnNames.Zone);
            }
            set
            {
                base.Setint(ColumnNames.Zone, value);
            }
        }

        public virtual int Region
        {
            get
            {
                return base.Getint(ColumnNames.Region);
            }
            set
            {
                base.Setint(ColumnNames.Region, value);
            }
        }

        public virtual string Telephone
        {
            get
            {
                return base.Getstring(ColumnNames.Telephone);
            }
            set
            {
                base.Setstring(ColumnNames.Telephone, value);
            }
        }

        public virtual string HospitalContact
        {
            get
            {
                return base.Getstring(ColumnNames.HospitalContact);
            }
            set
            {
                base.Setstring(ColumnNames.HospitalContact, value);
            }
        }

        public virtual int LeadTime
        {
            get
            {
                return base.Getint(ColumnNames.LeadTime);
            }
            set
            {
                base.Setint(ColumnNames.LeadTime, value);
            }
        }

        public virtual int Min
        {
            get
            {
                return base.Getint(ColumnNames.Min);
            }
            set
            {
                base.Setint(ColumnNames.Min, value);
            }
        }

        public virtual int Max
        {
            get
            {
                return base.Getint(ColumnNames.Max);
            }
            set
            {
                base.Setint(ColumnNames.Max, value);
            }
        }

        public virtual int SafteyStock
        {
            get
            {
                return base.Getint(ColumnNames.SafteyStock);
            }
            set
            {
                base.Setint(ColumnNames.SafteyStock, value);
            }
        }

        public virtual int AMCRange
        {
            get
            {
                return base.Getint(ColumnNames.AMCRange);
            }
            set
            {
                base.Setint(ColumnNames.AMCRange, value);
            }
        }

        public virtual int ReviewPeriod
        {
            get
            {
                return base.Getint(ColumnNames.ReviewPeriod);
            }
            set
            {
                base.Setint(ColumnNames.ReviewPeriod, value);
            }
        }

        public virtual double EOP
        {
            get
            {
                return base.Getdouble(ColumnNames.EOP);
            }
            set
            {
                base.Setdouble(ColumnNames.EOP, value);
            }
        }

        public virtual string Description
        {
            get
            {
                return base.Getstring(ColumnNames.Description);
            }
            set
            {
                base.Setstring(ColumnNames.Description, value);
            }
        }

        public virtual bool IsEven
        {
            get
            {
                return base.Getbool(ColumnNames.IsEven);
            }
            set
            {
                base.Setbool(ColumnNames.IsEven, value);
            }
        }

        public virtual string Logo
        {
            get
            {
                return base.Getstring(ColumnNames.Logo);
            }
            set
            {
                base.Setstring(ColumnNames.Logo, value);
            }
        }

        public virtual double DUMin
        {
            get
            {
                return base.Getdouble(ColumnNames.DUMin);
            }
            set
            {
                base.Setdouble(ColumnNames.DUMin, value);
            }
        }

        public virtual double DUMax
        {
            get
            {
                return base.Getdouble(ColumnNames.DUMax);
            }
            set
            {
                base.Setdouble(ColumnNames.DUMax, value);
            }
        }

        public virtual int DUAMCRange
        {
            get
            {
                return base.Getint(ColumnNames.DUAMCRange);
            }
            set
            {
                base.Setint(ColumnNames.DUAMCRange, value);
            }
        }

        public virtual DateTime LastBackUp
        {
            get
            {
                return base.GetDateTime(ColumnNames.LastBackUp);
            }
            set
            {
                base.SetDateTime(ColumnNames.LastBackUp, value);
            }
        }

        public virtual int FacilityID
        {
            get
            {
                return base.Getint(ColumnNames.FacilityID);
            }
            set
            {
                base.Setint(ColumnNames.FacilityID, value);
            }
        }

        public virtual DateTime LastSync
        {
            get
            {
                return base.GetDateTime(ColumnNames.LastSync);
            }
            set
            {
                base.SetDateTime(ColumnNames.LastSync, value);
            }
        }

        public virtual string DSUpdateFrequency
        {
            get
            {
                return base.Getstring(ColumnNames.DSUpdateFrequency);
            }
            set
            {
                base.Setstring(ColumnNames.DSUpdateFrequency, value);
            }
        }

        public virtual string RRFStatusUpdateFrequency
        {
            get
            {
                return base.Getstring(ColumnNames.RRFStatusUpdateFrequency);
            }
            set
            {
                base.Setstring(ColumnNames.RRFStatusUpdateFrequency, value);
            }
        }

        public virtual string RRFStatusFirstUpdateAfter
        {
            get
            {
                return base.Getstring(ColumnNames.RRFStatusFirstUpdateAfter);
            }
            set
            {
                base.Setstring(ColumnNames.RRFStatusFirstUpdateAfter, value);
            }
        }

        public virtual string ScmsWSUserName
        {
            get
            {
                return base.Getstring(ColumnNames.ScmsWSUserName);
            }
            set
            {
                base.Setstring(ColumnNames.ScmsWSUserName, value);
            }
        }

        public virtual string ScmsWSPassword
        {
            get
            {
                return base.Getstring(ColumnNames.ScmsWSPassword);
            }
            set
            {
                base.Setstring(ColumnNames.ScmsWSPassword, value);
            }
        }

        public virtual bool UsesModel
        {
            get
            {
                return base.Getbool(ColumnNames.UsesModel);
            }
            set
            {
                base.Setbool(ColumnNames.UsesModel, value);
            }
        }

        public virtual decimal PriceRate
        {
            get
            {
                return base.Getdecimal(ColumnNames.PriceRate);
            }
            set
            {
                base.Setdecimal(ColumnNames.PriceRate, value);
            }
        }


        #endregion

        #region String Properties

        public virtual string s_ID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetintAsString(ColumnNames.ID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ID);
                else
                    this.ID = base.SetintAsString(ColumnNames.ID, value);
            }
        }

        public virtual string s_HospitalName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.HospitalName) ? string.Empty : base.GetstringAsString(ColumnNames.HospitalName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.HospitalName);
                else
                    this.HospitalName = base.SetstringAsString(ColumnNames.HospitalName, value);
            }
        }

        public virtual string s_Woreda
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Woreda) ? string.Empty : base.GetintAsString(ColumnNames.Woreda);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Woreda);
                else
                    this.Woreda = base.SetintAsString(ColumnNames.Woreda, value);
            }
        }

        public virtual string s_Zone
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Zone) ? string.Empty : base.GetintAsString(ColumnNames.Zone);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Zone);
                else
                    this.Zone = base.SetintAsString(ColumnNames.Zone, value);
            }
        }

        public virtual string s_Region
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Region) ? string.Empty : base.GetintAsString(ColumnNames.Region);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Region);
                else
                    this.Region = base.SetintAsString(ColumnNames.Region, value);
            }
        }

        public virtual string s_Telephone
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Telephone) ? string.Empty : base.GetstringAsString(ColumnNames.Telephone);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Telephone);
                else
                    this.Telephone = base.SetstringAsString(ColumnNames.Telephone, value);
            }
        }

        public virtual string s_HospitalContact
        {
            get
            {
                return this.IsColumnNull(ColumnNames.HospitalContact) ? string.Empty : base.GetstringAsString(ColumnNames.HospitalContact);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.HospitalContact);
                else
                    this.HospitalContact = base.SetstringAsString(ColumnNames.HospitalContact, value);
            }
        }

        public virtual string s_LeadTime
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LeadTime) ? string.Empty : base.GetintAsString(ColumnNames.LeadTime);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LeadTime);
                else
                    this.LeadTime = base.SetintAsString(ColumnNames.LeadTime, value);
            }
        }

        public virtual string s_Min
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Min) ? string.Empty : base.GetintAsString(ColumnNames.Min);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Min);
                else
                    this.Min = base.SetintAsString(ColumnNames.Min, value);
            }
        }

        public virtual string s_Max
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Max) ? string.Empty : base.GetintAsString(ColumnNames.Max);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Max);
                else
                    this.Max = base.SetintAsString(ColumnNames.Max, value);
            }
        }

        public virtual string s_SafteyStock
        {
            get
            {
                return this.IsColumnNull(ColumnNames.SafteyStock) ? string.Empty : base.GetintAsString(ColumnNames.SafteyStock);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.SafteyStock);
                else
                    this.SafteyStock = base.SetintAsString(ColumnNames.SafteyStock, value);
            }
        }

        public virtual string s_AMCRange
        {
            get
            {
                return this.IsColumnNull(ColumnNames.AMCRange) ? string.Empty : base.GetintAsString(ColumnNames.AMCRange);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.AMCRange);
                else
                    this.AMCRange = base.SetintAsString(ColumnNames.AMCRange, value);
            }
        }

        public virtual string s_ReviewPeriod
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ReviewPeriod) ? string.Empty : base.GetintAsString(ColumnNames.ReviewPeriod);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ReviewPeriod);
                else
                    this.ReviewPeriod = base.SetintAsString(ColumnNames.ReviewPeriod, value);
            }
        }

        public virtual string s_EOP
        {
            get
            {
                return this.IsColumnNull(ColumnNames.EOP) ? string.Empty : base.GetdoubleAsString(ColumnNames.EOP);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.EOP);
                else
                    this.EOP = base.SetdoubleAsString(ColumnNames.EOP, value);
            }
        }

        public virtual string s_Description
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Description) ? string.Empty : base.GetstringAsString(ColumnNames.Description);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Description);
                else
                    this.Description = base.SetstringAsString(ColumnNames.Description, value);
            }
        }

        public virtual string s_IsEven
        {
            get
            {
                return this.IsColumnNull(ColumnNames.IsEven) ? string.Empty : base.GetboolAsString(ColumnNames.IsEven);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.IsEven);
                else
                    this.IsEven = base.SetboolAsString(ColumnNames.IsEven, value);
            }
        }

        public virtual string s_Logo
        {
            get
            {
                return this.IsColumnNull(ColumnNames.Logo) ? string.Empty : base.GetstringAsString(ColumnNames.Logo);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.Logo);
                else
                    this.Logo = base.SetstringAsString(ColumnNames.Logo, value);
            }
        }

        public virtual string s_DUMin
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DUMin) ? string.Empty : base.GetdoubleAsString(ColumnNames.DUMin);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DUMin);
                else
                    this.DUMin = base.SetdoubleAsString(ColumnNames.DUMin, value);
            }
        }

        public virtual string s_DUMax
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DUMax) ? string.Empty : base.GetdoubleAsString(ColumnNames.DUMax);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DUMax);
                else
                    this.DUMax = base.SetdoubleAsString(ColumnNames.DUMax, value);
            }
        }

        public virtual string s_DUAMCRange
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DUAMCRange) ? string.Empty : base.GetintAsString(ColumnNames.DUAMCRange);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DUAMCRange);
                else
                    this.DUAMCRange = base.SetintAsString(ColumnNames.DUAMCRange, value);
            }
        }

        public virtual string s_LastBackUp
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LastBackUp) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastBackUp);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LastBackUp);
                else
                    this.LastBackUp = base.SetDateTimeAsString(ColumnNames.LastBackUp, value);
            }
        }

        public virtual string s_FacilityID
        {
            get
            {
                return this.IsColumnNull(ColumnNames.FacilityID) ? string.Empty : base.GetintAsString(ColumnNames.FacilityID);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.FacilityID);
                else
                    this.FacilityID = base.SetintAsString(ColumnNames.FacilityID, value);
            }
        }

        public virtual string s_LastSync
        {
            get
            {
                return this.IsColumnNull(ColumnNames.LastSync) ? string.Empty : base.GetDateTimeAsString(ColumnNames.LastSync);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.LastSync);
                else
                    this.LastSync = base.SetDateTimeAsString(ColumnNames.LastSync, value);
            }
        }

        public virtual string s_DSUpdateFrequency
        {
            get
            {
                return this.IsColumnNull(ColumnNames.DSUpdateFrequency) ? string.Empty : base.GetstringAsString(ColumnNames.DSUpdateFrequency);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.DSUpdateFrequency);
                else
                    this.DSUpdateFrequency = base.SetstringAsString(ColumnNames.DSUpdateFrequency, value);
            }
        }

        public virtual string s_RRFStatusUpdateFrequency
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RRFStatusUpdateFrequency) ? string.Empty : base.GetstringAsString(ColumnNames.RRFStatusUpdateFrequency);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RRFStatusUpdateFrequency);
                else
                    this.RRFStatusUpdateFrequency = base.SetstringAsString(ColumnNames.RRFStatusUpdateFrequency, value);
            }
        }

        public virtual string s_RRFStatusFirstUpdateAfter
        {
            get
            {
                return this.IsColumnNull(ColumnNames.RRFStatusFirstUpdateAfter) ? string.Empty : base.GetstringAsString(ColumnNames.RRFStatusFirstUpdateAfter);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.RRFStatusFirstUpdateAfter);
                else
                    this.RRFStatusFirstUpdateAfter = base.SetstringAsString(ColumnNames.RRFStatusFirstUpdateAfter, value);
            }
        }

        public virtual string s_ScmsWSUserName
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ScmsWSUserName) ? string.Empty : base.GetstringAsString(ColumnNames.ScmsWSUserName);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ScmsWSUserName);
                else
                    this.ScmsWSUserName = base.SetstringAsString(ColumnNames.ScmsWSUserName, value);
            }
        }

        public virtual string s_ScmsWSPassword
        {
            get
            {
                return this.IsColumnNull(ColumnNames.ScmsWSPassword) ? string.Empty : base.GetstringAsString(ColumnNames.ScmsWSPassword);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.ScmsWSPassword);
                else
                    this.ScmsWSPassword = base.SetstringAsString(ColumnNames.ScmsWSPassword, value);
            }
        }

        public virtual string s_UsesModel
        {
            get
            {
                return this.IsColumnNull(ColumnNames.UsesModel) ? string.Empty : base.GetboolAsString(ColumnNames.UsesModel);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.UsesModel);
                else
                    this.UsesModel = base.SetboolAsString(ColumnNames.UsesModel, value);
            }
        }

        public virtual string s_PriceRate
        {
            get
            {
                return this.IsColumnNull(ColumnNames.PriceRate) ? string.Empty : base.GetdecimalAsString(ColumnNames.PriceRate);
            }
            set
            {
                if (string.Empty == value)
                    this.SetColumnNull(ColumnNames.PriceRate);
                else
                    this.PriceRate = base.SetdecimalAsString(ColumnNames.PriceRate, value);
            }
        }


        #endregion

        #region Where Clause
        public class WhereClause
        {
            public WhereClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffWhereParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffWhereParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region WhereParameter TearOff's
            public class TearOffWhereParameter
            {
                public TearOffWhereParameter(WhereClause clause)
                {
                    this._clause = clause;
                }


                public WhereParameter ID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter HospitalName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.HospitalName, Parameters.HospitalName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Woreda
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Woreda, Parameters.Woreda);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Zone
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Zone, Parameters.Zone);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Region
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Region, Parameters.Region);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Telephone
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Telephone, Parameters.Telephone);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter HospitalContact
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.HospitalContact, Parameters.HospitalContact);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LeadTime
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LeadTime, Parameters.LeadTime);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Min
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Min, Parameters.Min);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Max
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Max, Parameters.Max);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter SafteyStock
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.SafteyStock, Parameters.SafteyStock);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter AMCRange
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.AMCRange, Parameters.AMCRange);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ReviewPeriod
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ReviewPeriod, Parameters.ReviewPeriod);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter EOP
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.EOP, Parameters.EOP);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Description
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter IsEven
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.IsEven, Parameters.IsEven);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter Logo
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.Logo, Parameters.Logo);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DUMin
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DUMin, Parameters.DUMin);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DUMax
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DUMax, Parameters.DUMax);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DUAMCRange
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DUAMCRange, Parameters.DUAMCRange);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LastBackUp
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LastBackUp, Parameters.LastBackUp);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter FacilityID
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.FacilityID, Parameters.FacilityID);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter LastSync
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.LastSync, Parameters.LastSync);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter DSUpdateFrequency
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.DSUpdateFrequency, Parameters.DSUpdateFrequency);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RRFStatusUpdateFrequency
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RRFStatusUpdateFrequency, Parameters.RRFStatusUpdateFrequency);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter RRFStatusFirstUpdateAfter
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.RRFStatusFirstUpdateAfter, Parameters.RRFStatusFirstUpdateAfter);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ScmsWSUserName
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ScmsWSUserName, Parameters.ScmsWSUserName);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter ScmsWSPassword
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.ScmsWSPassword, Parameters.ScmsWSPassword);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter UsesModel
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.UsesModel, Parameters.UsesModel);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }

                public WhereParameter PriceRate
                {
                    get
                    {
                        WhereParameter where = new WhereParameter(ColumnNames.PriceRate, Parameters.PriceRate);
                        this._clause._entity.Query.AddWhereParameter(where);
                        return where;
                    }
                }


                private WhereClause _clause;
            }
            #endregion

            public WhereParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public WhereParameter HospitalName
            {
                get
                {
                    if (_HospitalName_W == null)
                    {
                        _HospitalName_W = TearOff.HospitalName;
                    }
                    return _HospitalName_W;
                }
            }

            public WhereParameter Woreda
            {
                get
                {
                    if (_Woreda_W == null)
                    {
                        _Woreda_W = TearOff.Woreda;
                    }
                    return _Woreda_W;
                }
            }

            public WhereParameter Zone
            {
                get
                {
                    if (_Zone_W == null)
                    {
                        _Zone_W = TearOff.Zone;
                    }
                    return _Zone_W;
                }
            }

            public WhereParameter Region
            {
                get
                {
                    if (_Region_W == null)
                    {
                        _Region_W = TearOff.Region;
                    }
                    return _Region_W;
                }
            }

            public WhereParameter Telephone
            {
                get
                {
                    if (_Telephone_W == null)
                    {
                        _Telephone_W = TearOff.Telephone;
                    }
                    return _Telephone_W;
                }
            }

            public WhereParameter HospitalContact
            {
                get
                {
                    if (_HospitalContact_W == null)
                    {
                        _HospitalContact_W = TearOff.HospitalContact;
                    }
                    return _HospitalContact_W;
                }
            }

            public WhereParameter LeadTime
            {
                get
                {
                    if (_LeadTime_W == null)
                    {
                        _LeadTime_W = TearOff.LeadTime;
                    }
                    return _LeadTime_W;
                }
            }

            public WhereParameter Min
            {
                get
                {
                    if (_Min_W == null)
                    {
                        _Min_W = TearOff.Min;
                    }
                    return _Min_W;
                }
            }

            public WhereParameter Max
            {
                get
                {
                    if (_Max_W == null)
                    {
                        _Max_W = TearOff.Max;
                    }
                    return _Max_W;
                }
            }

            public WhereParameter SafteyStock
            {
                get
                {
                    if (_SafteyStock_W == null)
                    {
                        _SafteyStock_W = TearOff.SafteyStock;
                    }
                    return _SafteyStock_W;
                }
            }

            public WhereParameter AMCRange
            {
                get
                {
                    if (_AMCRange_W == null)
                    {
                        _AMCRange_W = TearOff.AMCRange;
                    }
                    return _AMCRange_W;
                }
            }

            public WhereParameter ReviewPeriod
            {
                get
                {
                    if (_ReviewPeriod_W == null)
                    {
                        _ReviewPeriod_W = TearOff.ReviewPeriod;
                    }
                    return _ReviewPeriod_W;
                }
            }

            public WhereParameter EOP
            {
                get
                {
                    if (_EOP_W == null)
                    {
                        _EOP_W = TearOff.EOP;
                    }
                    return _EOP_W;
                }
            }

            public WhereParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public WhereParameter IsEven
            {
                get
                {
                    if (_IsEven_W == null)
                    {
                        _IsEven_W = TearOff.IsEven;
                    }
                    return _IsEven_W;
                }
            }

            public WhereParameter Logo
            {
                get
                {
                    if (_Logo_W == null)
                    {
                        _Logo_W = TearOff.Logo;
                    }
                    return _Logo_W;
                }
            }

            public WhereParameter DUMin
            {
                get
                {
                    if (_DUMin_W == null)
                    {
                        _DUMin_W = TearOff.DUMin;
                    }
                    return _DUMin_W;
                }
            }

            public WhereParameter DUMax
            {
                get
                {
                    if (_DUMax_W == null)
                    {
                        _DUMax_W = TearOff.DUMax;
                    }
                    return _DUMax_W;
                }
            }

            public WhereParameter DUAMCRange
            {
                get
                {
                    if (_DUAMCRange_W == null)
                    {
                        _DUAMCRange_W = TearOff.DUAMCRange;
                    }
                    return _DUAMCRange_W;
                }
            }

            public WhereParameter LastBackUp
            {
                get
                {
                    if (_LastBackUp_W == null)
                    {
                        _LastBackUp_W = TearOff.LastBackUp;
                    }
                    return _LastBackUp_W;
                }
            }

            public WhereParameter FacilityID
            {
                get
                {
                    if (_FacilityID_W == null)
                    {
                        _FacilityID_W = TearOff.FacilityID;
                    }
                    return _FacilityID_W;
                }
            }

            public WhereParameter LastSync
            {
                get
                {
                    if (_LastSync_W == null)
                    {
                        _LastSync_W = TearOff.LastSync;
                    }
                    return _LastSync_W;
                }
            }

            public WhereParameter DSUpdateFrequency
            {
                get
                {
                    if (_DSUpdateFrequency_W == null)
                    {
                        _DSUpdateFrequency_W = TearOff.DSUpdateFrequency;
                    }
                    return _DSUpdateFrequency_W;
                }
            }

            public WhereParameter RRFStatusUpdateFrequency
            {
                get
                {
                    if (_RRFStatusUpdateFrequency_W == null)
                    {
                        _RRFStatusUpdateFrequency_W = TearOff.RRFStatusUpdateFrequency;
                    }
                    return _RRFStatusUpdateFrequency_W;
                }
            }

            public WhereParameter RRFStatusFirstUpdateAfter
            {
                get
                {
                    if (_RRFStatusFirstUpdateAfter_W == null)
                    {
                        _RRFStatusFirstUpdateAfter_W = TearOff.RRFStatusFirstUpdateAfter;
                    }
                    return _RRFStatusFirstUpdateAfter_W;
                }
            }

            public WhereParameter ScmsWSUserName
            {
                get
                {
                    if (_ScmsWSUserName_W == null)
                    {
                        _ScmsWSUserName_W = TearOff.ScmsWSUserName;
                    }
                    return _ScmsWSUserName_W;
                }
            }

            public WhereParameter ScmsWSPassword
            {
                get
                {
                    if (_ScmsWSPassword_W == null)
                    {
                        _ScmsWSPassword_W = TearOff.ScmsWSPassword;
                    }
                    return _ScmsWSPassword_W;
                }
            }

            public WhereParameter UsesModel
            {
                get
                {
                    if (_UsesModel_W == null)
                    {
                        _UsesModel_W = TearOff.UsesModel;
                    }
                    return _UsesModel_W;
                }
            }

            public WhereParameter PriceRate
            {
                get
                {
                    if (_PriceRate_W == null)
                    {
                        _PriceRate_W = TearOff.PriceRate;
                    }
                    return _PriceRate_W;
                }
            }

            private WhereParameter _ID_W = null;
            private WhereParameter _HospitalName_W = null;
            private WhereParameter _Woreda_W = null;
            private WhereParameter _Zone_W = null;
            private WhereParameter _Region_W = null;
            private WhereParameter _Telephone_W = null;
            private WhereParameter _HospitalContact_W = null;
            private WhereParameter _LeadTime_W = null;
            private WhereParameter _Min_W = null;
            private WhereParameter _Max_W = null;
            private WhereParameter _SafteyStock_W = null;
            private WhereParameter _AMCRange_W = null;
            private WhereParameter _ReviewPeriod_W = null;
            private WhereParameter _EOP_W = null;
            private WhereParameter _Description_W = null;
            private WhereParameter _IsEven_W = null;
            private WhereParameter _Logo_W = null;
            private WhereParameter _DUMin_W = null;
            private WhereParameter _DUMax_W = null;
            private WhereParameter _DUAMCRange_W = null;
            private WhereParameter _LastBackUp_W = null;
            private WhereParameter _FacilityID_W = null;
            private WhereParameter _LastSync_W = null;
            private WhereParameter _DSUpdateFrequency_W = null;
            private WhereParameter _RRFStatusUpdateFrequency_W = null;
            private WhereParameter _RRFStatusFirstUpdateAfter_W = null;
            private WhereParameter _ScmsWSUserName_W = null;
            private WhereParameter _ScmsWSPassword_W = null;
            private WhereParameter _UsesModel_W = null;
            private WhereParameter _PriceRate_W = null;

            public void WhereClauseReset()
            {
                _ID_W = null;
                _HospitalName_W = null;
                _Woreda_W = null;
                _Zone_W = null;
                _Region_W = null;
                _Telephone_W = null;
                _HospitalContact_W = null;
                _LeadTime_W = null;
                _Min_W = null;
                _Max_W = null;
                _SafteyStock_W = null;
                _AMCRange_W = null;
                _ReviewPeriod_W = null;
                _EOP_W = null;
                _Description_W = null;
                _IsEven_W = null;
                _Logo_W = null;
                _DUMin_W = null;
                _DUMax_W = null;
                _DUAMCRange_W = null;
                _LastBackUp_W = null;
                _FacilityID_W = null;
                _LastSync_W = null;
                _DSUpdateFrequency_W = null;
                _RRFStatusUpdateFrequency_W = null;
                _RRFStatusFirstUpdateAfter_W = null;
                _ScmsWSUserName_W = null;
                _ScmsWSPassword_W = null;
                _UsesModel_W = null;
                _PriceRate_W = null;

                this._entity.Query.FlushWhereParameters();

            }

            private BusinessEntity _entity;
            private TearOffWhereParameter _tearOff;

        }

        public WhereClause Where
        {
            get
            {
                if (_whereClause == null)
                {
                    _whereClause = new WhereClause(this);
                }

                return _whereClause;
            }
        }

        private WhereClause _whereClause = null;
        #endregion

        #region Aggregate Clause
        public class AggregateClause
        {
            public AggregateClause(BusinessEntity entity)
            {
                this._entity = entity;
            }

            public TearOffAggregateParameter TearOff
            {
                get
                {
                    if (_tearOff == null)
                    {
                        _tearOff = new TearOffAggregateParameter(this);
                    }

                    return _tearOff;
                }
            }

            #region AggregateParameter TearOff's
            public class TearOffAggregateParameter
            {
                public TearOffAggregateParameter(AggregateClause clause)
                {
                    this._clause = clause;
                }


                public AggregateParameter ID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter HospitalName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.HospitalName, Parameters.HospitalName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Woreda
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Woreda, Parameters.Woreda);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Zone
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Zone, Parameters.Zone);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Region
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Region, Parameters.Region);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Telephone
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Telephone, Parameters.Telephone);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter HospitalContact
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.HospitalContact, Parameters.HospitalContact);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LeadTime
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LeadTime, Parameters.LeadTime);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Min
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Min, Parameters.Min);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Max
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Max, Parameters.Max);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter SafteyStock
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.SafteyStock, Parameters.SafteyStock);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter AMCRange
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.AMCRange, Parameters.AMCRange);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ReviewPeriod
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReviewPeriod, Parameters.ReviewPeriod);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter EOP
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.EOP, Parameters.EOP);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Description
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Description, Parameters.Description);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter IsEven
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsEven, Parameters.IsEven);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter Logo
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.Logo, Parameters.Logo);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DUMin
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DUMin, Parameters.DUMin);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DUMax
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DUMax, Parameters.DUMax);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DUAMCRange
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DUAMCRange, Parameters.DUAMCRange);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LastBackUp
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastBackUp, Parameters.LastBackUp);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter FacilityID
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.FacilityID, Parameters.FacilityID);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter LastSync
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastSync, Parameters.LastSync);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter DSUpdateFrequency
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.DSUpdateFrequency, Parameters.DSUpdateFrequency);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RRFStatusUpdateFrequency
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RRFStatusUpdateFrequency, Parameters.RRFStatusUpdateFrequency);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter RRFStatusFirstUpdateAfter
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.RRFStatusFirstUpdateAfter, Parameters.RRFStatusFirstUpdateAfter);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ScmsWSUserName
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ScmsWSUserName, Parameters.ScmsWSUserName);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter ScmsWSPassword
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.ScmsWSPassword, Parameters.ScmsWSPassword);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter UsesModel
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.UsesModel, Parameters.UsesModel);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }

                public AggregateParameter PriceRate
                {
                    get
                    {
                        AggregateParameter aggregate = new AggregateParameter(ColumnNames.PriceRate, Parameters.PriceRate);
                        this._clause._entity.Query.AddAggregateParameter(aggregate);
                        return aggregate;
                    }
                }


                private AggregateClause _clause;
            }
            #endregion

            public AggregateParameter ID
            {
                get
                {
                    if (_ID_W == null)
                    {
                        _ID_W = TearOff.ID;
                    }
                    return _ID_W;
                }
            }

            public AggregateParameter HospitalName
            {
                get
                {
                    if (_HospitalName_W == null)
                    {
                        _HospitalName_W = TearOff.HospitalName;
                    }
                    return _HospitalName_W;
                }
            }

            public AggregateParameter Woreda
            {
                get
                {
                    if (_Woreda_W == null)
                    {
                        _Woreda_W = TearOff.Woreda;
                    }
                    return _Woreda_W;
                }
            }

            public AggregateParameter Zone
            {
                get
                {
                    if (_Zone_W == null)
                    {
                        _Zone_W = TearOff.Zone;
                    }
                    return _Zone_W;
                }
            }

            public AggregateParameter Region
            {
                get
                {
                    if (_Region_W == null)
                    {
                        _Region_W = TearOff.Region;
                    }
                    return _Region_W;
                }
            }

            public AggregateParameter Telephone
            {
                get
                {
                    if (_Telephone_W == null)
                    {
                        _Telephone_W = TearOff.Telephone;
                    }
                    return _Telephone_W;
                }
            }

            public AggregateParameter HospitalContact
            {
                get
                {
                    if (_HospitalContact_W == null)
                    {
                        _HospitalContact_W = TearOff.HospitalContact;
                    }
                    return _HospitalContact_W;
                }
            }

            public AggregateParameter LeadTime
            {
                get
                {
                    if (_LeadTime_W == null)
                    {
                        _LeadTime_W = TearOff.LeadTime;
                    }
                    return _LeadTime_W;
                }
            }

            public AggregateParameter Min
            {
                get
                {
                    if (_Min_W == null)
                    {
                        _Min_W = TearOff.Min;
                    }
                    return _Min_W;
                }
            }

            public AggregateParameter Max
            {
                get
                {
                    if (_Max_W == null)
                    {
                        _Max_W = TearOff.Max;
                    }
                    return _Max_W;
                }
            }

            public AggregateParameter SafteyStock
            {
                get
                {
                    if (_SafteyStock_W == null)
                    {
                        _SafteyStock_W = TearOff.SafteyStock;
                    }
                    return _SafteyStock_W;
                }
            }

            public AggregateParameter AMCRange
            {
                get
                {
                    if (_AMCRange_W == null)
                    {
                        _AMCRange_W = TearOff.AMCRange;
                    }
                    return _AMCRange_W;
                }
            }

            public AggregateParameter ReviewPeriod
            {
                get
                {
                    if (_ReviewPeriod_W == null)
                    {
                        _ReviewPeriod_W = TearOff.ReviewPeriod;
                    }
                    return _ReviewPeriod_W;
                }
            }

            public AggregateParameter EOP
            {
                get
                {
                    if (_EOP_W == null)
                    {
                        _EOP_W = TearOff.EOP;
                    }
                    return _EOP_W;
                }
            }

            public AggregateParameter Description
            {
                get
                {
                    if (_Description_W == null)
                    {
                        _Description_W = TearOff.Description;
                    }
                    return _Description_W;
                }
            }

            public AggregateParameter IsEven
            {
                get
                {
                    if (_IsEven_W == null)
                    {
                        _IsEven_W = TearOff.IsEven;
                    }
                    return _IsEven_W;
                }
            }

            public AggregateParameter Logo
            {
                get
                {
                    if (_Logo_W == null)
                    {
                        _Logo_W = TearOff.Logo;
                    }
                    return _Logo_W;
                }
            }

            public AggregateParameter DUMin
            {
                get
                {
                    if (_DUMin_W == null)
                    {
                        _DUMin_W = TearOff.DUMin;
                    }
                    return _DUMin_W;
                }
            }

            public AggregateParameter DUMax
            {
                get
                {
                    if (_DUMax_W == null)
                    {
                        _DUMax_W = TearOff.DUMax;
                    }
                    return _DUMax_W;
                }
            }

            public AggregateParameter DUAMCRange
            {
                get
                {
                    if (_DUAMCRange_W == null)
                    {
                        _DUAMCRange_W = TearOff.DUAMCRange;
                    }
                    return _DUAMCRange_W;
                }
            }

            public AggregateParameter LastBackUp
            {
                get
                {
                    if (_LastBackUp_W == null)
                    {
                        _LastBackUp_W = TearOff.LastBackUp;
                    }
                    return _LastBackUp_W;
                }
            }

            public AggregateParameter FacilityID
            {
                get
                {
                    if (_FacilityID_W == null)
                    {
                        _FacilityID_W = TearOff.FacilityID;
                    }
                    return _FacilityID_W;
                }
            }

            public AggregateParameter LastSync
            {
                get
                {
                    if (_LastSync_W == null)
                    {
                        _LastSync_W = TearOff.LastSync;
                    }
                    return _LastSync_W;
                }
            }

            public AggregateParameter DSUpdateFrequency
            {
                get
                {
                    if (_DSUpdateFrequency_W == null)
                    {
                        _DSUpdateFrequency_W = TearOff.DSUpdateFrequency;
                    }
                    return _DSUpdateFrequency_W;
                }
            }

            public AggregateParameter RRFStatusUpdateFrequency
            {
                get
                {
                    if (_RRFStatusUpdateFrequency_W == null)
                    {
                        _RRFStatusUpdateFrequency_W = TearOff.RRFStatusUpdateFrequency;
                    }
                    return _RRFStatusUpdateFrequency_W;
                }
            }

            public AggregateParameter RRFStatusFirstUpdateAfter
            {
                get
                {
                    if (_RRFStatusFirstUpdateAfter_W == null)
                    {
                        _RRFStatusFirstUpdateAfter_W = TearOff.RRFStatusFirstUpdateAfter;
                    }
                    return _RRFStatusFirstUpdateAfter_W;
                }
            }

            public AggregateParameter ScmsWSUserName
            {
                get
                {
                    if (_ScmsWSUserName_W == null)
                    {
                        _ScmsWSUserName_W = TearOff.ScmsWSUserName;
                    }
                    return _ScmsWSUserName_W;
                }
            }

            public AggregateParameter ScmsWSPassword
            {
                get
                {
                    if (_ScmsWSPassword_W == null)
                    {
                        _ScmsWSPassword_W = TearOff.ScmsWSPassword;
                    }
                    return _ScmsWSPassword_W;
                }
            }

            public AggregateParameter UsesModel
            {
                get
                {
                    if (_UsesModel_W == null)
                    {
                        _UsesModel_W = TearOff.UsesModel;
                    }
                    return _UsesModel_W;
                }
            }

            public AggregateParameter PriceRate
            {
                get
                {
                    if (_PriceRate_W == null)
                    {
                        _PriceRate_W = TearOff.PriceRate;
                    }
                    return _PriceRate_W;
                }
            }

            private AggregateParameter _ID_W = null;
            private AggregateParameter _HospitalName_W = null;
            private AggregateParameter _Woreda_W = null;
            private AggregateParameter _Zone_W = null;
            private AggregateParameter _Region_W = null;
            private AggregateParameter _Telephone_W = null;
            private AggregateParameter _HospitalContact_W = null;
            private AggregateParameter _LeadTime_W = null;
            private AggregateParameter _Min_W = null;
            private AggregateParameter _Max_W = null;
            private AggregateParameter _SafteyStock_W = null;
            private AggregateParameter _AMCRange_W = null;
            private AggregateParameter _ReviewPeriod_W = null;
            private AggregateParameter _EOP_W = null;
            private AggregateParameter _Description_W = null;
            private AggregateParameter _IsEven_W = null;
            private AggregateParameter _Logo_W = null;
            private AggregateParameter _DUMin_W = null;
            private AggregateParameter _DUMax_W = null;
            private AggregateParameter _DUAMCRange_W = null;
            private AggregateParameter _LastBackUp_W = null;
            private AggregateParameter _FacilityID_W = null;
            private AggregateParameter _LastSync_W = null;
            private AggregateParameter _DSUpdateFrequency_W = null;
            private AggregateParameter _RRFStatusUpdateFrequency_W = null;
            private AggregateParameter _RRFStatusFirstUpdateAfter_W = null;
            private AggregateParameter _ScmsWSUserName_W = null;
            private AggregateParameter _ScmsWSPassword_W = null;
            private AggregateParameter _UsesModel_W = null;
            private AggregateParameter _PriceRate_W = null;

            public void AggregateClauseReset()
            {
                _ID_W = null;
                _HospitalName_W = null;
                _Woreda_W = null;
                _Zone_W = null;
                _Region_W = null;
                _Telephone_W = null;
                _HospitalContact_W = null;
                _LeadTime_W = null;
                _Min_W = null;
                _Max_W = null;
                _SafteyStock_W = null;
                _AMCRange_W = null;
                _ReviewPeriod_W = null;
                _EOP_W = null;
                _Description_W = null;
                _IsEven_W = null;
                _Logo_W = null;
                _DUMin_W = null;
                _DUMax_W = null;
                _DUAMCRange_W = null;
                _LastBackUp_W = null;
                _FacilityID_W = null;
                _LastSync_W = null;
                _DSUpdateFrequency_W = null;
                _RRFStatusUpdateFrequency_W = null;
                _RRFStatusFirstUpdateAfter_W = null;
                _ScmsWSUserName_W = null;
                _ScmsWSPassword_W = null;
                _UsesModel_W = null;
                _PriceRate_W = null;

                this._entity.Query.FlushAggregateParameters();

            }

            private BusinessEntity _entity;
            private TearOffAggregateParameter _tearOff;

        }

        public AggregateClause Aggregate
        {
            get
            {
                if (_aggregateClause == null)
                {
                    _aggregateClause = new AggregateClause(this);
                }

                return _aggregateClause;
            }
        }

        private AggregateClause _aggregateClause = null;
        #endregion

        protected override IDbCommand GetInsertCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_GeneralInfoInsert]";

            CreateParameters(cmd);

            SqlParameter p;
            p = cmd.Parameters[Parameters.ID.ParameterName];
            p.Direction = ParameterDirection.Output;

            return cmd;
        }

        protected override IDbCommand GetUpdateCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_GeneralInfoUpdate]";

            CreateParameters(cmd);

            return cmd;
        }

        protected override IDbCommand GetDeleteCommand()
        {

            SqlCommand cmd = new SqlCommand();
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_GeneralInfoDelete]";

            SqlParameter p;
            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }

        private IDbCommand CreateParameters(SqlCommand cmd)
        {
            SqlParameter p;

            p = cmd.Parameters.Add(Parameters.ID);
            p.SourceColumn = ColumnNames.ID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.HospitalName);
            p.SourceColumn = ColumnNames.HospitalName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Woreda);
            p.SourceColumn = ColumnNames.Woreda;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Zone);
            p.SourceColumn = ColumnNames.Zone;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Region);
            p.SourceColumn = ColumnNames.Region;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Telephone);
            p.SourceColumn = ColumnNames.Telephone;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.HospitalContact);
            p.SourceColumn = ColumnNames.HospitalContact;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LeadTime);
            p.SourceColumn = ColumnNames.LeadTime;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Min);
            p.SourceColumn = ColumnNames.Min;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Max);
            p.SourceColumn = ColumnNames.Max;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.SafteyStock);
            p.SourceColumn = ColumnNames.SafteyStock;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.AMCRange);
            p.SourceColumn = ColumnNames.AMCRange;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ReviewPeriod);
            p.SourceColumn = ColumnNames.ReviewPeriod;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.EOP);
            p.SourceColumn = ColumnNames.EOP;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Description);
            p.SourceColumn = ColumnNames.Description;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.IsEven);
            p.SourceColumn = ColumnNames.IsEven;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.Logo);
            p.SourceColumn = ColumnNames.Logo;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DUMin);
            p.SourceColumn = ColumnNames.DUMin;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DUMax);
            p.SourceColumn = ColumnNames.DUMax;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DUAMCRange);
            p.SourceColumn = ColumnNames.DUAMCRange;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LastBackUp);
            p.SourceColumn = ColumnNames.LastBackUp;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.FacilityID);
            p.SourceColumn = ColumnNames.FacilityID;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.LastSync);
            p.SourceColumn = ColumnNames.LastSync;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.DSUpdateFrequency);
            p.SourceColumn = ColumnNames.DSUpdateFrequency;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RRFStatusUpdateFrequency);
            p.SourceColumn = ColumnNames.RRFStatusUpdateFrequency;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.RRFStatusFirstUpdateAfter);
            p.SourceColumn = ColumnNames.RRFStatusFirstUpdateAfter;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ScmsWSUserName);
            p.SourceColumn = ColumnNames.ScmsWSUserName;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.ScmsWSPassword);
            p.SourceColumn = ColumnNames.ScmsWSPassword;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.UsesModel);
            p.SourceColumn = ColumnNames.UsesModel;
            p.SourceVersion = DataRowVersion.Current;

            p = cmd.Parameters.Add(Parameters.PriceRate);
            p.SourceColumn = ColumnNames.PriceRate;
            p.SourceVersion = DataRowVersion.Current;


            return cmd;
        }
    }
}